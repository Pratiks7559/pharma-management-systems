Python django hml css bootstrap js  website with following details

Model.py
from django.contrib.auth.models import AbstractUser
from django.db import models
from datetime import datetime 



# Create your models here.
class Web_User(AbstractUser):
    # firstname=models.CharField(max_length=150, null=False, blank=False )
    # lastname=models.CharField(max_length=150, null=False, blank=False)
    username=models.CharField(max_length=150, unique=True, null=False, blank=False)
    password=models.CharField(max_length=100)
    user_type=models.CharField(max_length=50)
    user_contact=models.CharField(max_length=100)
    # path = models.ImageField(upload_to='images/')
    path = models.ImageField(upload_to='images/',default='images/default.png')
    def __str__(self):  
        return self.username
    # profile_picture = models.ImageField(upload_to='images/', blank=True, null=True)    
    # user_isactive=models.DecimalField(max_digits=1,decimal_places=0, default=0)
    # add additional fields in here
  
    
class Pharmacy_Details(models.Model):
    pharmaname=models.CharField(max_length=300)
    pharmaweburl=models.CharField(max_length=150)
    proprietorname=models.CharField(max_length=100)
    proprietorcontact=models.CharField(max_length=12)
    proprietoremail=models.CharField(max_length=100)
  
#     user_type=models.CharField(max_length=50)
#     user_email=models.EmailField(max_length=100)
#     user_contact=models.CharField(max_length=100)
#     user_isactive=models.DecimalField(max_digits=1,decimal_places=0, default=0)

    # REQUIRED_FIELDS = ('username', 'password',)

# class ProfileImage(models.Model):
#     # uname= models.CharField(max_length=255,default='unknown')
#     # caption = models.CharField(max_length=255)
#     user = models.OneToOneField(Web_User, on_delete=models.CASCADE, default=None)
#     path = models.ImageField(upload_to='images/',default='images/default.png')
#     def __str__(self):  
#         return self.user.username
class ProductMaster(models.Model):
    productid=models.BigAutoField(primary_key=True, auto_created=True)
    product_name=models.CharField(max_length=200)
    product_company=models.CharField(max_length=200)
    product_packing=models.CharField(max_length=20)
    product_image=models.ImageField(upload_to='images/',default='images/medicine_default.png', null=True)
    product_salt=models.CharField(max_length=300, default=None)
    product_category=models.CharField(max_length=30, default=None)
    product_hsn=models.CharField(max_length=20, default=None)
    product_hsn_percent=models.CharField(max_length=20, default=None)
    rate_A=models.FloatField(default=0.0)
    rate_B=models.FloatField(default=0.0)
    rate_C=models.FloatField(default=0.0)
    
class SupplierMaster(models.Model):
    supplierid=models.BigAutoField(primary_key=True, auto_created=True)
    supplier_name=models.CharField(max_length=200)
    supplier_type=models.CharField(max_length=200)
    supplier_address=models.CharField(max_length=200)
    supplier_mobile=models.CharField(max_length=15)
    supplier_whatsapp=models.CharField(max_length=15)
    supplier_emailid=models.CharField(max_length=60)
    supplier_spoc=models.CharField(max_length=100)
    supplier_dlno=models.CharField(max_length=30)
    supplier_gstno=models.CharField(max_length=20)
    supplier_bank=models.CharField(max_length=200)
    supplier_bankaccountno=models.CharField(max_length=30)
    supplier_bankifsc=models.CharField(max_length=20)
    supplier_upi=models.CharField(max_length=50, null=True)

class CustomerMaster(models.Model):
    customerid=models.BigAutoField(primary_key=True, auto_created=True)
    customer_name=models.CharField(max_length=200, default='NA')
    customer_type=models.CharField(max_length=200, blank=True, default='TYPE-A')
    customer_address=models.CharField(max_length=200, blank=True, default='NA')
    customer_mobile=models.CharField(max_length=15, blank=True, default='NA')
    customer_whatsapp=models.CharField(max_length=15, blank=True, default='NA')
    customer_emailid=models.CharField(max_length=60, blank=True, default='NA')
    customer_spoc=models.CharField(max_length=100, blank=True, default='NA')
    customer_dlno=models.CharField(max_length=30, blank=True, default='NA')
    customer_gstno=models.CharField(max_length=20, blank=True, default='NA')
    customer_bank=models.CharField(max_length=200,blank=True, default='NA')
    customer_bankaccountno=models.CharField(max_length=30,blank=True, default='NA')
    customer_bankifsc=models.CharField(max_length=20, blank=True, default='NA')
    customer_upi=models.CharField(max_length=50, blank=True)
    customer_credit_days=models.IntegerField(blank=True, default=0)

class InvoiceMaster(models.Model):
    invoiceid=models.BigAutoField(primary_key=True, auto_created=True)
    invoice_no=models.CharField(max_length=20)
    invoice_date=models.DateField(null=False, blank=False, default=datetime.now)
    supplierid=models.ForeignKey(SupplierMaster, on_delete=models.CASCADE)
    transport_charges=models.FloatField()
    invoice_total=models.FloatField(null=False, blank=False)
    invoice_paid=models.FloatField(null=False, blank=False, default=0)
    class Meta:
        constraints = [
            models.UniqueConstraint(fields=['invoice_no', 'supplierid'], name='unique_invoiceno_supplierid')
        ]

class InvoicePaid(models.Model):
    payment_id=models.BigAutoField(primary_key=True, auto_created=True)
    ip_invoiceid=models.ForeignKey(InvoiceMaster, on_delete=models.CASCADE)
    payment_date=models.DateField(null=False, blank=False, default=datetime.now)
    payment_amount=models.FloatField()
    payment_mode=models.CharField(max_length=30, null=True)
    payment_ref_no=models.CharField(max_length=30, null=True)

class PurchaseMaster(models.Model):
    purchaseid=models.BigAutoField(primary_key=True, auto_created=True) 
    product_supplierid=models.ForeignKey(SupplierMaster, on_delete=models.CASCADE)
    product_invoiceid=models.ForeignKey(InvoiceMaster, on_delete=models.CASCADE, default=1)
    product_invoice_no=models.CharField(max_length=20)
    productid=models.ForeignKey(ProductMaster, on_delete=models.CASCADE)
    product_name=models.CharField(max_length=200)
    product_company=models.CharField(max_length=200)
    product_packing=models.CharField(max_length=20)
    product_batch_no=models.CharField(max_length=20)
    product_expiry=models.DateField(default=datetime.now) 
    product_MRP=models.FloatField()
    product_purchase_rate=models.FloatField()  
    product_quantity=models.FloatField()
    product_scheme=models.FloatField(default=0.0)
    product_discount_got=models.FloatField()
    product_transportation_charges=models.FloatField()   
    actual_rate_per_qty=models.FloatField(default=0.0)  
    product_actual_rate=models.FloatField(default=0.0)
    total_amount=models.FloatField(default=0.0)  
    purchase_entry_date=models.DateTimeField(default=datetime.now)
    IGST=models.FloatField(default=0.0)
    purchase_calculation_mode=models.CharField(max_length=5, default='flat') 
    #calculation_mode indicates how discount is calculated by flat-rupees or %-percent

class SalesInvoiceMaster(models.Model):
    sales_invoice_no=models.CharField(primary_key=True, max_length=20)
    sales_invoice_date=models.DateField(null=False, blank=False)
    customerid=models.ForeignKey(CustomerMaster, on_delete=models.CASCADE)
    sales_transport_charges=models.FloatField()
    sales_invoice_total=models.FloatField(null=False, blank=False)
    sales_invoice_paid=models.FloatField(null=False, blank=False, default=0)

class SalesMaster(models.Model):
    sales_invoice_no=models.ForeignKey(SalesInvoiceMaster, on_delete=models.CASCADE)
    customerid=models.ForeignKey(CustomerMaster, on_delete=models.CASCADE)
    productid=models.ForeignKey(ProductMaster, on_delete=models.CASCADE)
    product_name=models.CharField(max_length=200, default='NA')
    product_company=models.CharField(max_length=200, blank=True, default='NA')
    product_packing=models.CharField(max_length=20, blank=True, default='NA')
    product_batch_no=models.CharField(max_length=20)
    product_expiry=models.DateField(default=datetime.now)
    product_MRP=models.FloatField(default=0.0)
    sale_rate=models.FloatField(default=0.0)
    sale_quantity=models.FloatField(default=0.0)
    sale_scheme=models.FloatField(default=0.0)
    sale_discount=models.FloatField(default=0.0)
    sale_igst=models.FloatField(default=0.0)
    sale_total_amount=models.FloatField(default=0.0)
    sale_entry_date=models.DateTimeField(default=datetime.now)
    rate_applied=models.CharField(max_length=10, blank=True, default='NA')
    sale_calculation_mode=models.CharField(max_length=5, default='flat') 
    #calculation_mode indicates how discount is calculated by flat-rupees or %-percent
   
class SalesInvoicePaid(models.Model):
    sales_payment_id=models.BigAutoField(primary_key=True, auto_created=True)
    sales_ip_invoice_no=models.ForeignKey(SalesInvoiceMaster, on_delete=models.CASCADE)
    sales_payment_date=models.DateTimeField(default=datetime.now)
    sales_payment_amount=models.FloatField()
    sales_payment_mode=models.CharField(max_length=30, default='NA')
    sales_payment_ref_no=models.CharField(max_length=30,default='NA')

class ProductRateMaster(models.Model):
    rate_productid=models.ForeignKey(ProductMaster, on_delete=models.CASCADE)
    rate_A=models.FloatField(default=0.0)
    rate_B=models.FloatField(default=0.0)
    rate_C=models.FloatField(default=0.0)
    rate_date=models.DateField(null=False, blank=False, default=datetime.now)

class ReturnInvoiceMaster(models.Model):
    returninvoiceid=models.CharField(primary_key=True, max_length=20)
    returninvoice_date=models.DateField(null=False, blank=False, default=datetime.now)
    returnsupplierid=models.ForeignKey(SupplierMaster, on_delete=models.CASCADE)
    return_charges=models.FloatField(default=0)
    returninvoice_total=models.FloatField(null=False, blank=False)
    returninvoice_paid=models.FloatField(null=False, blank=False, default=0)

class PurchaseReturnInvoicePaid(models.Model):
    pr_payment_id=models.BigAutoField(primary_key=True, auto_created=True)
    pr_ip_returninvoiceid=models.ForeignKey(ReturnInvoiceMaster, on_delete=models.CASCADE)
    pr_payment_date=models.DateField(null=False, blank=False, default=datetime.now)
    pr_payment_amount=models.FloatField()
    pr_payment_mode=models.CharField(max_length=30, null=True)
    pr_payment_ref_no=models.CharField(max_length=30, null=True)
    

class ReturnPurchaseMaster(models.Model):
    returnpurchaseid=models.BigAutoField(primary_key=True, auto_created=True)
    returninvoiceid=models.ForeignKey(ReturnInvoiceMaster, on_delete=models.CASCADE, default=1) 
    returnproduct_supplierid=models.ForeignKey(SupplierMaster, on_delete=models.CASCADE)
    returnproductid=models.ForeignKey(ProductMaster, on_delete=models.CASCADE)
    returnproduct_batch_no=models.CharField(max_length=20)
    returnproduct_expiry=models.DateField(default=datetime.now)
    returnproduct_MRP=models.FloatField(default=0.0)  
    returnproduct_purchase_rate=models.FloatField()  
    returnproduct_quantity=models.FloatField()
    returnproduct_scheme=models.FloatField(default=0.0)
    returnproduct_charges=models.FloatField()
    returntotal_amount=models.FloatField(default=0.0)       
    returnpurchase_entry_date=models.DateField(default=datetime.now)

class ReturnSalesInvoiceMaster(models.Model):
    return_sales_invoice_no=models.CharField(primary_key=True, max_length=20)
    return_sales_invoice_date=models.DateField(null=False, blank=False)
    return_sales_customerid=models.ForeignKey(CustomerMaster, on_delete=models.CASCADE)
    return_sales_charges=models.FloatField(default=0)
    return_sales_invoice_total=models.FloatField(null=False, blank=False)
    return_sales_invoice_paid=models.FloatField(null=False, blank=False, default=0)

class ReturnSalesInvoicePaid(models.Model):
    return_sales_payment_id=models.BigAutoField(primary_key=True, auto_created=True)
    return_sales_ip_invoice_no=models.ForeignKey(ReturnSalesInvoiceMaster, on_delete=models.CASCADE)
    return_sales_payment_date=models.DateTimeField(default=datetime.now)
    return_sales_payment_amount=models.FloatField()
    return_sales_payment_mode=models.CharField(max_length=30, default='NA')
    return_sales_payment_ref_no=models.CharField(max_length=30,default='NA')

class ReturnSalesMaster(models.Model):
    return_sales_invoiceid=models.BigAutoField(primary_key=True, auto_created=True)
    return_sales_invoice_no=models.ForeignKey(ReturnSalesInvoiceMaster, on_delete=models.CASCADE, default=1) 
    sales_invoice_no=models.ForeignKey(SalesInvoiceMaster, on_delete=models.CASCADE)
    return_sales_customerid=models.ForeignKey(CustomerMaster, on_delete=models.CASCADE)
    return_sales_productid=models.ForeignKey(ProductMaster, on_delete=models.CASCADE)
    return_sales_product_batch_no=models.CharField(max_length=20)
    return_sales_product_expiry=models.DateField(default=datetime.now)
    return_sales_product_MRP=models.FloatField(default=0.0)  
    return_sales_sale_rate=models.FloatField()  
    return_sales_sale_quantity=models.FloatField()
    return_sales_sale_igst=models.FloatField(default=0.0)
    return_sales_sale_scheme=models.FloatField(default=0.0)
    return_sales_product_charges=models.FloatField()
    return_sales_total_amount=models.FloatField(default=0.0)       
    return_sales_sale_entry_date=models.DateTimeField(default=datetime.now)



forms.py
from django import forms
from .models import Web_User, SupplierMaster, ProductMaster, CustomerMaster, ReturnSalesMaster
from .models import PurchaseMaster, InvoiceMaster, InvoicePaid, SalesMaster, SalesInvoiceMaster, SalesInvoicePaid
from .models import ProductRateMaster, ReturnPurchaseMaster, ReturnInvoiceMaster, PurchaseReturnInvoicePaid, ReturnSalesInvoiceMaster, ReturnSalesInvoicePaid

        
USERTYPE_CHOICES =( 
    ("ADMIN", "ADMIN"), 
    ("PRINCIPAL", "PRINCIPAL"), 
    ("HEAD", "HEAD"), 
    ("TEACHING STAFF", "TEACHING STAFF"), 
    ("ACCOUNTANT", "ACCOUNTANT"), 
    ("CLERK", "CLERK"), 
) 

class Web_User_Form(forms.ModelForm):
    class Meta:
        model = Web_User
        # fields = '__all__' 
        fields = ('first_name', 'last_name', 'email' ,'username', 'password','user_type', 'user_contact','path')   
        widgets = {
            'first_name': forms.TextInput(attrs={'class' : 'form-field d-flex align-items-center'}),
            'last_name' : forms.TextInput(attrs={'class' : 'form-field d-flex align-items-center'}),
            'email' : forms.TextInput(attrs={'class' : 'form-field d-flex align-items-center'}),
            'username' : forms.TextInput(attrs={'class' : 'form-field d-flex align-items-center'}),
            'password' : forms.TextInput(attrs={'class' : 'form-field d-flex align-items-center','type':'password'}),
            'user_type' : forms.TextInput(attrs={'class' : 'form-field d-flex align-items-center'}),
            # 'user_type' : forms.ChoiceField(choices = USERTYPE_CHOICES),
            'user_contact' : forms.TextInput(attrs={'class' : 'form-field d-flex align-items-center'}),
            # 'path' : forms.ImageField(),
            # 'password' : forms.CharField(widget=forms.PasswordInput),
            }
        

        
class Web_Login_Form(forms.ModelForm):
    class Meta:
        model=Web_User
        fields= ('username','password' )
        widgets = {
            'username' : forms.TextInput(attrs={'class' : 'form-field d-flex align-items-center m-2'}),
            'password' : forms.TextInput(attrs={'class' : 'form-field d-flex align-items-center m-2','type':'password'}),
            
            # 'submit' : forms.inpu(attrs={'class' : 'btn mt-2','type':'submit'}),
            }

# class ProfileForm(forms.ModelForm):
#     class Meta:
#         model = ProfileImage
#         # exclude = ("id", )
#         fields = '__all__' 
#         # fields = ('uname', 'caption', 'image', )   
          
    
class frm_suppliermaster(forms.ModelForm):
    class Meta:
        model = SupplierMaster
        # exclude = ("id", )
        # fields = '__all__'
        fields = ( 'supplier_name', 'supplier_type', 'supplier_address', 'supplier_mobile', 'supplier_whatsapp', 'supplier_emailid', 'supplier_spoc', 'supplier_dlno', 'supplier_gstno', 'supplier_bank', 'supplier_bankaccountno', 'supplier_bankifsc', 'supplier_upi') 
        widgets = {
            'supplierid' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'supplier_name' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'supplier_type' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'supplier_address' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'supplier_mobile' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'supplier_whatsapp' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'supplier_emailid' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'supplier_spoc' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'supplier_dlno' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'supplier_gstno' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'supplier_bank' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'supplier_bankaccountno' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'supplier_bankifsc' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'supplier_upi' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),

        }
        # fields = ('uname', 'caption', 'image', )    

# class frm_productmaster(forms.ModelForm):
#     class Meta:
#         model = SupplierMaster
#         # exclude = ("id", )
#         fields = '__all__' 
#         # fields = ('uname', 'caption', 'image', )   

# class frm_customermaster(forms.ModelForm):
#     class Meta:
#         model = CustomerMaster
#         # exclude = ("id", )
#         fields = '__all__' 
           

class frm_customermaster(forms.ModelForm):
    class Meta:
        model = CustomerMaster
        # exclude = ("id", )
        # fields = '__all__'
        fields = ('customer_name', 'customer_type', 'customer_address', 'customer_mobile', 'customer_whatsapp', 'customer_emailid', 'customer_spoc', 'customer_dlno', 'customer_gstno', 'customer_bank', 'customer_bankaccountno', 'customer_bankifsc', 'customer_upi', 'customer_credit_days') 
       
        widgets = {
            'customerid' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customer_name' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customer_type' : forms.TextInput(attrs={'id' : 'customer_type', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customer_address' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customer_mobile' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customer_whatsapp' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customer_emailid' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customer_spoc' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customer_dlno' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customer_gstno' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customer_bank' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customer_bankaccountno' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customer_bankifsc' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customer_upi' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customer_credit_days' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),  

        }

class frm_productmaster(forms.ModelForm):
    class Meta:
        model = ProductMaster
        # exclude = ("id", )
        # fields = '__all__'
        fields = ( 'productid','product_name', 'product_company', 'product_packing', 'product_image', 'product_salt', 'product_category', 'product_hsn', 'product_hsn_percent', 'rate_A', 'rate_B', 'rate_C')
        widgets = {
            'productid' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_name' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_company' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_packing' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            # 'product_image' : forms.ImageField(),
            'product_salt': forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_category' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_hsn' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_hsn_percent' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'rate_A' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'rate_B' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'rate_C' : forms.TextInput(attrs={'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
        }

class frm_invoicemaster(forms.ModelForm):
    class Meta:
        model = InvoiceMaster
        fields = ('invoice_no', 'invoice_date', 'supplierid', 'transport_charges', 'invoice_total', 'invoice_paid')
        widgets = {
            'invoice_no' : forms.TextInput(attrs={'name' : 'master_invoice_no', 'id' : 'invoice_no', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'invoice_date' : forms.DateInput(attrs={'id' : 'invoice_date','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'supplierid' : forms.TextInput(attrs={'id' : 'invoicemaster_supplierid', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'transport_charges' : forms.TextInput(attrs={'id' : 'transport_charges','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'invoice_total' : forms.TextInput(attrs={'id' : 'invoice_total','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'invoice_paid' : forms.TextInput(attrs={'id' : 'invoice_paid','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
        }

class frm_invoicemaster_edit(forms.ModelForm):
    class Meta:
        model = InvoiceMaster
        fields = ('invoice_no', 'invoice_date', 'supplierid', 'transport_charges', 'invoice_total', 'invoice_paid')
        widgets = {
            'invoice_no' : forms.TextInput(attrs={'id' : 'invoice_no_edit', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'invoice_date' : forms.DateInput(attrs={'id' : 'invoice_date_edit','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'supplierid' : forms.TextInput(attrs={'id' : 'supplierid_edit', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'transport_charges' : forms.TextInput(attrs={'id' : 'transport_charges_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'invoice_total' : forms.TextInput(attrs={'id' : 'invoice_total_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'invoice_paid' : forms.TextInput(attrs={'id' : 'invoice_paid_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
        }


class frm_invoicepaid(forms.ModelForm):
    class Meta:
        model = InvoicePaid
        fields = ('ip_invoiceid', 'payment_date', 'payment_amount', 'payment_mode', 'payment_ref_no')
        widgets = {
            'ip_invoiceid' : forms.TextInput(attrs={'readonly' : 'readonly', 'id' : 'ip_invoiceid', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'payment_date' : forms.DateInput(attrs={'id' : 'payment_date','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'payment_amount' : forms.TextInput(attrs={'id' : 'payment_amount', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur':'chkPaymentAmout()'}),
            'payment_mode' : forms.TextInput(attrs={'id' : 'payment_mode','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'payment_ref_no' : forms.TextInput(attrs={'id' : 'payment_ref_no','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            }
        

class frm_purchasemaster(forms.ModelForm):
    class Meta:
        model = PurchaseMaster
        # exclude = ("id", )
        # fields = '__all__'
        fields = ( 'purchaseid', 'product_supplierid', 'product_invoice_no', 'productid','product_name', 'product_company', 'product_packing', 'product_batch_no', 'product_expiry',
                   'product_MRP', 'product_purchase_rate', 'product_quantity', 'product_scheme', 'product_discount_got', 'product_transportation_charges', 'actual_rate_per_qty', 'product_actual_rate', 'total_amount', 'purchase_entry_date' , 'IGST', 'purchase_calculation_mode')
        widgets = {
            'purchaseid' : forms.TextInput(attrs={'id' : 'purchaseid','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_supplierid' : forms.TextInput(attrs={'id' : 'product_supplierid', 'readonly' : 'readonly', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2  shadow-lg frm_input'}),
            'product_invoice_no' : forms.TextInput(attrs={'id' : 'product_invoice_no','readonly' : 'readonly', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            # 'product_invoice_date' : forms.DateInput(attrs={'id' : 'product_invoice_date','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'productid' : forms.TextInput(attrs={'id' : 'productid','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_name' : forms.TextInput(attrs={'id' : 'product_name','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','tabindex' : '0'}),
            'product_company' : forms.TextInput(attrs={'id' : 'product_company','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_packing' : forms.TextInput(attrs={'id' : 'product_packing','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_batch_no' : forms.TextInput(attrs={'id' : 'product_batch_no','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_expiry' : forms.DateInput(attrs={'id' : 'product_expiry', 'class' : 'form-field visibility d-none fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_MRP' : forms.TextInput(attrs={'id' : 'product_MRP','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_purchase_rate' : forms.TextInput(attrs={'id' : 'product_purchase_rate','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'chkPercentageClicked()' }),
            'product_quantity' : forms.TextInput(attrs={'id' : 'product_quantity','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'chkPercentageClicked()' }),
            'product_scheme' : forms.TextInput(attrs={'id' : 'product_scheme','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','value' : '0.0'}),
            'product_discount_got' : forms.TextInput(attrs={'id' : 'product_discount_got', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'chkPercentageClicked()'}),
            'product_transportation_charges' : forms.TextInput(attrs={'id' : 'product_transportation_charges','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'chkPercentageClicked()'}),
            'actual_rate_per_qty' : forms.TextInput(attrs={'id' : 'actual_rate_per_qty','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'chkPercentageClicked()'}),
            'product_actual_rate' : forms.TextInput(attrs={'id' : 'product_actual_rate','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'chkPercentageClicked()'}),
            'total_amount' : forms.TextInput(attrs={'id' : 'total_amount','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','onchange' : 'totAmountChange()'}),
            'purchase_entry_date' : forms.DateTimeInput(attrs={'id' : 'purchase_entry_date', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'IGST' : forms.TextInput(attrs={'id' : 'IGST','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'chkPercentageClicked()'}),
            'purchase_calculation_mode' : forms.TextInput(attrs={'id' : 'purchase_calculation_mode','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','readonly':'readonly'}),          
        }

class frm_purchaseeditmaster(forms.ModelForm):
    class Meta:
        model = PurchaseMaster
        # exclude = ("id", )
        # fields = '__all__'
        fields = ( 'purchaseid', 'product_supplierid', 'product_invoice_no', 'productid','product_name', 'product_company', 'product_packing', 'product_batch_no', 'product_expiry',
                   'product_MRP', 'product_purchase_rate', 'product_quantity', 'product_scheme', 'product_discount_got', 'product_transportation_charges', 'actual_rate_per_qty', 'product_actual_rate', 'total_amount', 'purchase_entry_date' , 'IGST', 'purchase_calculation_mode')
        widgets = {
            'purchaseid' : forms.TextInput(attrs={'id' : 'edit_edit_purchaseid','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_supplierid' : forms.TextInput(attrs={'id' : 'edit_product_supplierid', 'readonly' : 'readonly', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2  shadow-lg frm_input'}),
            'product_invoice_no' : forms.TextInput(attrs={'id' : 'edit_product_invoice_no','readonly' : 'readonly', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            # 'product_invoice_date' : forms.DateInput(attrs={'id' : 'product_invoice_date','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'productid' : forms.TextInput(attrs={'id' : 'edit_productid','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_name' : forms.TextInput(attrs={'id' : 'edit_product_name','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','tabindex' : '0'}),
            'product_company' : forms.TextInput(attrs={'id' : 'edit_product_company','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_packing' : forms.TextInput(attrs={'id' : 'edit_product_packing','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_batch_no' : forms.TextInput(attrs={'id' : 'edit_product_batch_no','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_expiry' : forms.DateInput(attrs={'id' : 'edit_product_expiry', 'class' : 'form-field visibility d-none fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_MRP' : forms.TextInput(attrs={'id' : 'edit_product_MRP','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_purchase_rate' : forms.TextInput(attrs={'id' : 'edit_product_purchase_rate','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'editchkPercentageClicked()'}),
            'product_quantity' : forms.TextInput(attrs={'id' : 'edit_product_quantity','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'editchkPercentageClicked()'}),
            'product_scheme' : forms.TextInput(attrs={'id' : 'edit_product_scheme','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','value' : '0.0'}),
            'product_discount_got' : forms.TextInput(attrs={'id' : 'edit_product_discount_got', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'editchkPercentageClicked()'}),
            'product_transportation_charges' : forms.TextInput(attrs={'id' : 'edit_product_transportation_charges','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'editchkPercentageClicked()'}),
            'actual_rate_per_qty' : forms.TextInput(attrs={'id' : 'edit_actual_rate_per_qty','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'editchkPercentageClicked()'}),
            'product_actual_rate' : forms.TextInput(attrs={'id' : 'edit_product_actual_rate','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'editchkPercentageClicked()'}),
            'total_amount' : forms.TextInput(attrs={'id' : 'edit_total_amount','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','oninput' : 'edittotAmountChange()'}),
            'purchase_entry_date' : forms.DateTimeInput(attrs={'id' : 'edit_purchase_entry_date', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'IGST' : forms.TextInput(attrs={'id' : 'edit_IGST','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'editchkPercentageClicked()'}),
            'purchase_calculation_mode' : forms.TextInput(attrs={'id' : 'edit_purchase_calculation_mode','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','readonly':'readonly'}),          
        }

class frm_salesmaster(forms.ModelForm):
    class Meta:
        model = SalesMaster
        fields = (
            'sales_invoice_no',
            'customerid',
            'productid',
            'product_name',
            'product_company',
            'product_packing',
            'product_batch_no',
            'product_expiry',
            'product_MRP',
            'sale_rate',
            'sale_quantity',
            'sale_scheme',
            'sale_discount',
            'sale_igst',
            'sale_total_amount',
            'sale_entry_date',
            'rate_applied',
            'sale_calculation_mode',
        )
        widgets = {
            'sales_invoice_no' : forms.TextInput(attrs={'id' : 'sale_master_sales_invoice_no','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customerid' : forms.TextInput(attrs={'id' : 'product_customerid', 'readonly' : 'readonly', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2  shadow-lg frm_input'}),
            'productid' : forms.TextInput(attrs={'id' : 'productid','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_name' : forms.TextInput(attrs={'id' : 'product_name','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','tabindex' : '0'}),
            'product_company' : forms.TextInput(attrs={'id' : 'product_company','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_packing' : forms.TextInput(attrs={'id' : 'product_packing','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_batch_no' : forms.TextInput(attrs={'id' : 'product_batch_no', 'onblur'  : 'on_batchno_blur(this.value)' ,'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_expiry' : forms.DateInput(attrs={'id' : 'product_expiry', 'class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_MRP' : forms.TextInput(attrs={'id' : 'product_MRP','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'sale_rate' : forms.TextInput(attrs={'id' : 'sale_rate','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'sale_quantity_check()' }),
            'sale_quantity' : forms.TextInput(attrs={'id' : 'sale_quantity', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'sale_quantity_check()' }),
            'sale_scheme' : forms.TextInput(attrs={'id' : 'sale_scheme','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','value' : '0.0'}),
            'sale_discount' : forms.TextInput(attrs={'id' : 'sale_discount', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','onblur' : 'sale_quantity_check()'}),
            'sale_igst' : forms.TextInput(attrs={'id' : 'sale_igst','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'sale_quantity_check()'}),
            'sale_total_amount' : forms.TextInput(attrs={'id' : 'sale_total_amount','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'sale_entry_date' : forms.DateTimeInput(attrs={'id' : 'sale_entry_date', 'class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'rate_applied' : forms.TextInput(attrs={'id' : 'rate_applied', 'readonly' : 'readonly', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2  shadow-lg frm_input'}),
            'sale_calculation_mode' : forms.TextInput(attrs={'id' : 'sale_calculation_mode','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),          
        }

class frm_saleseditmaster(forms.ModelForm):
    class Meta:
        model = SalesMaster
        fields = (
            'sales_invoice_no',
            'customerid',
            'productid',
            'product_name',
            'product_company',
            'product_packing',
            'product_batch_no',
            'product_expiry',
            'product_MRP',
            'sale_rate',
            'sale_quantity',
            'sale_scheme',
            'sale_discount',
            'sale_igst',
            'sale_total_amount',
            'sale_entry_date',
            'rate_applied',
            'sale_calculation_mode',
        )
        widgets = {
            'sales_invoice_no' : forms.TextInput(attrs={'id' : 'edit_sale_master_sales_invoice_no','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customerid' : forms.TextInput(attrs={'id' : 'edit_product_customerid', 'readonly' : 'readonly', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2  shadow-lg frm_input'}),
            'productid' : forms.TextInput(attrs={'id' : 'edit_productid','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_name' : forms.TextInput(attrs={'id' : 'edit_product_name','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','tabindex' : '0'}),
            'product_company' : forms.TextInput(attrs={'id' : 'edit_product_company','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_packing' : forms.TextInput(attrs={'id' : 'edit_product_packing','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_batch_no' : forms.TextInput(attrs={'id' : 'edit_product_batch_no', 'onblur'  : 'on_edit_batchno_blur(this.value)' ,'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_expiry' : forms.DateInput(attrs={'id' : 'edit_product_expiry', 'class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'product_MRP' : forms.TextInput(attrs={'id' : 'edit_product_MRP','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'sale_rate' : forms.TextInput(attrs={'id' : 'edit_sale_rate','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'edit_sale_quantity_check()' }),
            'sale_quantity' : forms.TextInput(attrs={'id' : 'edit_sale_quantity', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'edit_sale_quantity_check()' }),
            'sale_scheme' : forms.TextInput(attrs={'id' : 'edit_sale_scheme','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','value' : '0.0'}),
            'sale_discount' : forms.TextInput(attrs={'id' : 'edit_sale_discount', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','onblur' : 'edit_sale_quantity_check()'}),
            'sale_igst' : forms.TextInput(attrs={'id' : 'edit_sale_igst','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'edit_sale_quantity_check()'}),
            'sale_total_amount' : forms.TextInput(attrs={'id' : 'edit_sale_total_amount','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'sale_entry_date' : forms.DateTimeInput(attrs={'id' : 'edit_sale_entry_date', 'class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'rate_applied' : forms.TextInput(attrs={'id' : 'edit_rate_applied', 'readonly' : 'readonly', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2  shadow-lg frm_input'}),
            'sale_calculation_mode' : forms.TextInput(attrs={'id' : 'edit_sale_calculation_mode', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),          
        }

class frm_salesinvoicemaster(forms.ModelForm):
    class Meta:
        model = SalesInvoiceMaster
        fields = ('sales_invoice_no', 'sales_invoice_date', 'customerid', 'sales_transport_charges', 'sales_invoice_total', 'sales_invoice_paid')
        widgets = {
            'sales_invoice_no' : forms.TextInput(attrs={ 'name' : 'sales_invoice_no', 'id' : 'sales_invoice_no', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'sales_invoice_date' : forms.DateInput(attrs={'id' : 'sales_invoice_date','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'customerid' : forms.TextInput(attrs={'id' : 'sales_invoicemaster_customerid', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'sales_transport_charges' : forms.TextInput(attrs={'id' : 'sales_transport_charges','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'sales_invoice_total' : forms.TextInput(attrs={'id' : 'sales_invoice_total','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'sales_invoice_paid' : forms.TextInput(attrs={'id' : 'sales_invoice_paid','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
        }

class frm_salesinvoicepaid(forms.ModelForm):
    class Meta:
        model = SalesInvoicePaid
        fields = ('sales_ip_invoice_no', 'sales_payment_date', 'sales_payment_amount', 'sales_payment_mode', 'sales_payment_ref_no')
        widgets = {
            'sales_ip_invoice_no' : forms.TextInput(attrs={'readonly' : 'readonly', 'id' : 'sales_ip_invoice_no', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'sales_payment_date' : forms.DateInput(attrs={'id' : 'sales_payment_date','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'sales_payment_amount' : forms.TextInput(attrs={'id' : 'sales_payment_amount', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'sales_payment_mode' : forms.TextInput(attrs={'id' : 'sales_payment_mode','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'sales_payment_ref_no' : forms.TextInput(attrs={'id' : 'sales_payment_ref_no','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            }

class frm_productratemaster(forms.ModelForm):
    class Meta:
        model = ProductRateMaster
        fields = ('rate_productid', 'rate_A', 'rate_B', 'rate_C', 'rate_date')
        widgets = {
            'rate_productid' : forms.TextInput(attrs={'readonly' : 'readonly', 'id' : 'rate_productid', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'rate_A' : forms.TextInput(attrs={'id' : 'rate_A','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'rate_B' : forms.TextInput(attrs={'id' : 'rate_B', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'rate_C' : forms.TextInput(attrs={'id' : 'rate_C','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'rate_date' : forms.DateInput(attrs={'id' : 'rate_date','class' : 'form-field d-flex fs-5 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
        }

class frm_returninvoicemaster(forms.ModelForm):
    class Meta:
        model = ReturnInvoiceMaster
        fields = ('returninvoiceid', 'returninvoice_date', 'returnsupplierid', 'return_charges', 'returninvoice_total', 'returninvoice_paid')
        widgets = {
            'returninvoiceid' : forms.TextInput(attrs={'name' : 'returninvoiceid', 'id' : 'returninvoiceid', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returninvoice_date' : forms.DateInput(attrs={'id' : 'returninvoice_date','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returnsupplierid' : forms.TextInput(attrs={'id' : 'returnsupplierid', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_charges' : forms.TextInput(attrs={'id' : 'return_charges','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returninvoice_total' : forms.TextInput(attrs={'id' : 'returninvoice_total','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returninvoice_paid' : forms.TextInput(attrs={'id' : 'returninvoice_paid','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
        }

class frm_returninvoicemaster_edit(forms.ModelForm):
    class Meta:
        model = ReturnInvoiceMaster
        fields = ('returninvoiceid', 'returninvoice_date', 'returnsupplierid', 'return_charges', 'returninvoice_total', 'returninvoice_paid')
        widgets = {
            'returninvoiceid' : forms.TextInput(attrs={'name' : 'returninvoiceid_edit', 'id' : 'returninvoiceid_edit', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returninvoice_date' : forms.DateInput(attrs={'id' : 'returninvoice_date_edit','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returnsupplierid' : forms.TextInput(attrs={'id' : 'returnsupplierid_edit', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_charges' : forms.TextInput(attrs={'id' : 'return_charges_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returninvoice_total' : forms.TextInput(attrs={'id' : 'returninvoice_total_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returninvoice_paid' : forms.TextInput(attrs={'id' : 'returninvoice_paid_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
        }

class frm_returnpurchasemaster(forms.ModelForm):
    class Meta:
        model = ReturnPurchaseMaster
        # exclude = ("id", )
        # fields = '__all__'
        fields = ( 
            'returnpurchaseid',
            'returninvoiceid',
            'returnproduct_supplierid',
            'returnproductid',
            'returnproduct_batch_no',
            'returnproduct_expiry',
            'returnproduct_MRP',
            'returnproduct_purchase_rate',
            'returnproduct_quantity',
            'returnproduct_scheme',
            'returnproduct_charges',
            'returntotal_amount',
            'returnpurchase_entry_date',
        )
        widgets = {
            'returnpurchaseid' : forms.TextInput(attrs={'id' : 'returnpurchaseid','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returninvoiceid' : forms.TextInput(attrs={'id' : 'returninvoiceid_rpm', 'readonly' : 'readonly', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2  shadow-lg frm_input'}),
            'returnproduct_supplierid' : forms.TextInput(attrs={'id' : 'returnproduct_supplierid','readonly' : 'readonly', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returnproductid' : forms.TextInput(attrs={'id' : 'returnproductid','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returnproduct_batch_no' : forms.TextInput(attrs={'id' : 'returnproduct_batch_no', 'onblur'  : 'on_batchno_blur(this.value)', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','tabindex' : '0'}),
            'returnproduct_expiry' : forms.DateInput(attrs={'id' : 'returnproduct_expiry','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returnproduct_MRP' : forms.TextInput(attrs={'id' : 'returnproduct_MRP','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returnproduct_purchase_rate' : forms.TextInput(attrs={'id' : 'returnproduct_purchase_rate','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'chkPercentageClicked()'}),
            'returnproduct_quantity' : forms.TextInput(attrs={'id' : 'returnproduct_quantity','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'chkPercentageClicked()'}),
            'returnproduct_scheme' : forms.TextInput(attrs={'id' : 'returnproduct_scheme','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returnproduct_charges' : forms.TextInput(attrs={'id' : 'returnproduct_charges', 'class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returntotal_amount' : forms.TextInput(attrs={'id' : 'returntotal_amount','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'chkPercentageClicked()' }),          
            'returnpurchase_entry_date' : forms.DateInput(attrs={'id' : 'returnpurchase_entry_date','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
           
        }



class frm_returnpurchasemaster_edit(forms.ModelForm):
    class Meta:
        model = ReturnPurchaseMaster
        # exclude = ("id", )
        # fields = '__all__'
        fields = ( 
            'returnpurchaseid',
            'returninvoiceid',
            'returnproduct_supplierid',
            'returnproductid',
            'returnproduct_batch_no',
            'returnproduct_expiry',
            'returnproduct_MRP',
            'returnproduct_purchase_rate',
            'returnproduct_quantity',
            'returnproduct_scheme',
            'returnproduct_charges',
            'returntotal_amount',
            'returnpurchase_entry_date',
        )
        widgets = {
            'returnpurchaseid' : forms.TextInput(attrs={'id' : 'returnpurchaseid_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returninvoiceid' : forms.TextInput(attrs={'id' : 'returninvoiceid_rpm_edit', 'readonly' : 'readonly', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2  shadow-lg frm_input'}),
            'returnproduct_supplierid' : forms.TextInput(attrs={'id' : 'returnproduct_supplierid_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returnproductid' : forms.TextInput(attrs={'id' : 'returnproductid_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returnproduct_batch_no' : forms.TextInput(attrs={'id' : 'returnproduct_batch_no_edit', 'onblur'  : 'on_batchno_blur(this.value)', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','tabindex' : '0'}),
            'returnproduct_expiry' : forms.DateInput(attrs={'id' : 'returnproduct_expiry_edit','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returnproduct_MRP' : forms.TextInput(attrs={'id' : 'returnproduct_MRP_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returnproduct_purchase_rate' : forms.TextInput(attrs={'id' : 'returnproduct_purchase_rate_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'chkPercentageClicked_edit()'}),
            'returnproduct_quantity' : forms.TextInput(attrs={'id' : 'returnproduct_quantity_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'chkPercentageClicked_edit()'}),
            'returnproduct_scheme' : forms.TextInput(attrs={'id' : 'returnproduct_scheme_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returnproduct_charges' : forms.TextInput(attrs={'id' : 'returnproduct_charges_edit', 'class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'returntotal_amount' : forms.TextInput(attrs={'id' : 'returntotal_amount_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'chkPercentageClicked_edit()' }),          
            'returnpurchase_entry_date' : forms.DateInput(attrs={'id' : 'returnpurchase_entry_date_edit','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
           
        }

class frm_pr_purchasereturnrnvoicepaid(forms.ModelForm):
    class Meta:
        model = PurchaseReturnInvoicePaid
        fields = (  'pr_ip_returninvoiceid',
                    'pr_payment_date',
                    'pr_payment_amount',
                    'pr_payment_mode',
                    'pr_payment_ref_no')    
        widgets = {
        
            'pr_ip_returninvoiceid' : forms.TextInput(attrs={'id' : 'pr_ip_returninvoiceid', 'readonly' : 'readonly', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2  shadow-lg frm_input'}),
            'pr_payment_date' : forms.DateInput(attrs={'id' : 'pr_payment_date','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'pr_payment_amount' : forms.TextInput(attrs={'id' : 'pr_payment_amount', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'pr_payment_mode' : forms.TextInput(attrs={'id' : 'pr_payment_mode','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'pr_payment_ref_no' : forms.TextInput(attrs={'id' : 'pr_payment_ref_no','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            }
        


class frm_salereturnsmaster(forms.ModelForm):
    class Meta:
        model = ReturnSalesMaster
        fields = (
            'return_sales_invoice_no',
            'sales_invoice_no',
            'return_sales_customerid',
            'return_sales_productid',
            'return_sales_product_batch_no',
            'return_sales_product_expiry',
            'return_sales_product_MRP',
            'return_sales_sale_rate',
            'return_sales_sale_quantity',
            'return_sales_sale_igst',
            'return_sales_sale_scheme',
            'return_sales_product_charges',    
            'return_sales_total_amount',
            'return_sales_sale_entry_date',
        )
        widgets = {
            'return_sales_invoice_no' : forms.TextInput(attrs={'id' : 'srm_return_sales_invoice_no','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'sales_invoice_no' : forms.TextInput(attrs={'id' : 'srm_sales_invoice_no','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),            
            'return_sales_customerid' : forms.TextInput(attrs={'id' : 'srm_return_sales_customerid', 'readonly' : 'readonly', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2  shadow-lg frm_input'}),
            'return_sales_productid' : forms.TextInput(attrs={'id' : 'srm_return_sales_productid','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_product_batch_no' : forms.TextInput(attrs={'id' : 'srm_return_sales_product_batch_no', 'onblur'  : 'on_batchno_blur(this.value)' ,'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_product_expiry' : forms.DateInput(attrs={'id' : 'srm_return_sales_product_expiry', 'class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_product_MRP' : forms.TextInput(attrs={'id' : 'srm_return_sales_product_MRP','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_sale_rate' : forms.TextInput(attrs={'id' : 'srm_return_sales_sale_rate','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'sale_quantity_check()' }),
            'return_sales_sale_quantity' : forms.TextInput(attrs={'id' : 'srm_return_sales_sale_quantity', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'sale_quantity_check()' }),
            'return_sales_sale_igst' : forms.TextInput(attrs={'id' : 'srm_return_sales_sale_igst', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'sale_quantity_check()' }),
            'return_sales_sale_scheme' : forms.TextInput(attrs={'id' : 'srm_return_sales_sale_scheme','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','value' : '0.0'}),
            'return_sales_product_charges' : forms.TextInput(attrs={'id' : 'srm_return_sales_product_charges', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'sale_quantity_check()' }),
            'return_sales_total_amount' : forms.TextInput(attrs={'id' : 'srm_return_sale_total_amount','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_sale_entry_date' : forms.DateTimeInput(attrs={'id' : 'srm_return_sales_sale_entry_date', 'class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),          
        }

class frm_salereturnsmaster_edit(forms.ModelForm):
    class Meta:
        model = ReturnSalesMaster
        fields = (
            'return_sales_invoice_no',
            'sales_invoice_no',
            'return_sales_customerid',
            'return_sales_productid',
            'return_sales_product_batch_no',
            'return_sales_product_expiry',
            'return_sales_product_MRP',
            'return_sales_sale_rate',
            'return_sales_sale_quantity',
            'return_sales_sale_igst',
            'return_sales_sale_scheme',
            'return_sales_product_charges',    
            'return_sales_total_amount',
            'return_sales_sale_entry_date',
        )
        widgets = {
            'return_sales_invoice_no' : forms.TextInput(attrs={'id' : 'srm_return_sales_invoice_no_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'sales_invoice_no' : forms.TextInput(attrs={'id' : 'srm_sales_invoice_no_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),            
            'return_sales_customerid' : forms.TextInput(attrs={'id' : 'srm_return_sales_customerid_edit', 'readonly' : 'readonly', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2  shadow-lg frm_input'}),
            'return_sales_productid' : forms.TextInput(attrs={'id' : 'srm_return_sales_productid_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_product_batch_no' : forms.TextInput(attrs={'id' : 'srm_return_sales_product_batch_no_edit', 'onblur'  : 'on_batchno_blur(this.value)' ,'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_product_expiry' : forms.DateInput(attrs={'id' : 'srm_return_sales_product_expiry_edit', 'class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_product_MRP' : forms.TextInput(attrs={'id' : 'srm_return_sales_product_MRP_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_sale_rate' : forms.TextInput(attrs={'id' : 'srm_return_sales_sale_rate_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'sale_quantity_check_edit()' }),
            'return_sales_sale_quantity' : forms.TextInput(attrs={'id' : 'srm_return_sales_sale_quantity_edit', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'sale_quantity_check_edit()' }),
            'return_sales_sale_igst' : forms.TextInput(attrs={'id' : 'srm_return_sales_sale_igst_edit', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input', 'onblur' : 'sale_quantity_check_edit()' }),
            'return_sales_sale_scheme' : forms.TextInput(attrs={'id' : 'srm_return_sales_sale_scheme_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input','value' : '0.0'}),
            'return_sales_product_charges' : forms.TextInput(attrs={'id' : 'srm_return_sales_product_charges_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_total_amount' : forms.TextInput(attrs={'id' : 'srm_return_sale_total_amount_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_sale_entry_date' : forms.DateTimeInput(attrs={'id' : 'srm_return_sales_sale_entry_date_edit', 'class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),          
        }


class frm_salesreturninvoicemaster(forms.ModelForm):
    class Meta:
        model = ReturnSalesInvoiceMaster
        fields = ('return_sales_invoice_no', 'return_sales_invoice_date', 'return_sales_customerid', 'return_sales_charges', 'return_sales_invoice_total', 'return_sales_invoice_paid')
        widgets = {
            'return_sales_invoice_no' : forms.TextInput(attrs={ 'name' : 'sr_return_sales_invoice_no', 'id' : 'sales_invoice_no', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_invoice_date' : forms.DateInput(attrs={'id' : 'sr_return_sales_invoice_date','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_customerid' : forms.TextInput(attrs={'id' : 'sr_return_sales_customerid', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_charges' : forms.TextInput(attrs={'id' : 'sr_return_sales_charges','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_invoice_total' : forms.TextInput(attrs={'id' : 'sr_return_sales_invoice_total','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_invoice_paid' : forms.TextInput(attrs={'id' : 'sr_return_sales_invoice_paid','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
        }

class frm_salesreturninvoicemaster_edit(forms.ModelForm):
    class Meta:
        model = ReturnSalesInvoiceMaster
        fields = ('return_sales_invoice_no', 'return_sales_invoice_date', 'return_sales_customerid', 'return_sales_charges', 'return_sales_invoice_total', 'return_sales_invoice_paid')
        widgets = {
            'return_sales_invoice_no' : forms.TextInput(attrs={ 'id' : 'sr_return_sales_invoice_no_edit', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_invoice_date' : forms.DateInput(attrs={'id' : 'sr_return_sales_invoice_date_edit','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_customerid' : forms.TextInput(attrs={'id' : 'sr_return_sales_customerid_edit', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_charges' : forms.TextInput(attrs={'id' : 'sr_return_sales_charges_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_invoice_total' : forms.TextInput(attrs={'id' : 'sr_return_sales_invoice_total_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_invoice_paid' : forms.TextInput(attrs={'id' : 'sr_return_sales_invoice_paid_edit','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
        }


class frm_salesreturninvoicepaid(forms.ModelForm):
    class Meta:
        model = ReturnSalesInvoicePaid
        fields = ('return_sales_ip_invoice_no', 'return_sales_payment_date', 'return_sales_payment_amount', 'return_sales_payment_mode', 'return_sales_payment_ref_no')
        widgets = {
            'return_sales_ip_invoice_no' : forms.TextInput(attrs={'readonly' : 'readonly', 'id' : 'sales_ip_invoice_no', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_payment_date' : forms.DateInput(attrs={'id' : 'sales_payment_date','class' : 'form-field visibility d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_payment_amount' : forms.TextInput(attrs={'id' : 'sales_payment_amount', 'class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_payment_mode' : forms.TextInput(attrs={'id' : 'sales_payment_mode','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            'return_sales_payment_ref_no' : forms.TextInput(attrs={'id' : 'sales_payment_ref_no','class' : 'form-field d-flex fs-5 w-100 mb-3 p-2 rounded-3 shadow-lg frm_input'}),
            }

Views.py
from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.template import loader
from django.contrib.auth import authenticate, login, logout
from django.views.decorators.csrf import csrf_exempt, csrf_protect
from django.contrib import messages
from django.db import models
from django.contrib.auth.decorators import login_required
from django.contrib.auth import get_user_model
from django.views.decorators.cache import never_cache
from django.views.decorators.http import require_http_methods
from .models import Web_User, Pharmacy_Details, SupplierMaster, CustomerMaster, ProductMaster, ProductRateMaster
from .models import PurchaseMaster, ReturnPurchaseMaster, InvoiceMaster, ReturnInvoiceMaster, InvoicePaid, SalesMaster, ReturnSalesMaster, SalesInvoiceMaster, SalesInvoicePaid
from .models import PurchaseReturnInvoicePaid, ReturnSalesInvoiceMaster, ReturnSalesInvoicePaid
from django.http import HttpResponseRedirect, JsonResponse
from .forms import Web_User_Form, Web_Login_Form,frm_suppliermaster, frm_customermaster, frm_productmaster, frm_returninvoicemaster
from .forms import frm_purchasemaster, frm_invoicemaster, frm_invoicepaid, frm_invoicemaster_edit, frm_returnpurchasemaster
from .forms import frm_salesmaster, frm_saleseditmaster, frm_salesinvoicemaster, frm_salesinvoicepaid, frm_productratemaster, frm_purchaseeditmaster
from courses.forms import Courses_Form 
from .forms import frm_salesreturninvoicemaster, frm_salesreturninvoicepaid, frm_salereturnsmaster_edit,frm_salesreturninvoicemaster_edit
from .forms import frm_returninvoicemaster_edit, frm_returnpurchasemaster_edit, frm_pr_purchasereturnrnvoicepaid, frm_salereturnsmaster
from django.urls import reverse
from django.core.management import call_command
from django.core.paginator import Paginator
from django.core.files.storage import FileSystemStorage
from django.contrib.sessions.models import Session
import os
from datetime import datetime
from django.db.models import Sum
from django.shortcuts import get_object_or_404
from django.db import connection





# Web_User = get_user_model()

# def profile_upload(request):
#     call_command('clearsessions')
#     if request.method == 'POST':
#       form=ProfileForm(request.POST,request.FILES)
      
#       if form.is_valid():
#             form.save()
#             # fs=FileSystemStorage()
#             # name=fs.save()
#             return redirect('/login')
#       else:
#             print(form.errors)
#     else:
#         form = ProfileForm()
  
#     return render(request, 'profileimage.html',{})   



# def Image_Upload(request):
#     call_command('clearsessions')
#     model = ProfileImage
#     form=ProfileForm()
#     template_name='profileimage.html'
#     uid = request.GET.get('uname')
#     print(uid)
#     request.session['uname']=uid
#     return render(request,
#             'profileimage.html',
#             {'form': form})
    # return render(request,'profileimage.html')

# def college_view(request):
#     call_command('clearsessions')
#     context ={} 
#     context['form']= CollegeForm() 
#     return render(request, "home.html", context) 
#   # template = loader.get_template('login.html')
#   # return HttpResponse(template.render())

   
def pharmadata(request):
    call_command('clearsessions')
    mypharmadata=Pharmacy_Details.objects.all().values()
    template=loader.get_template('index.html')
    context = {
        'mypharmadata' : mypharmadata,
    }
    return HttpResponse(template,render(context,request))
# Create your views here.


@csrf_exempt 
@login_required(login_url='login')
@never_cache
def master_home(request):
  call_command('clearsessions')
#   uname=request.GET.get('uname')

  session_key = request.session.session_key
  request.session['pass_key']=session_key

  mypharmadata=Pharmacy_Details.objects.all().first()
  imgpath=request.session['imgpath']
  fname=request.session['fname']
  lname=request.session['lname']
  utype=request.session['utype']
  print(imgpath, mypharmadata)
#   uname=request.session['username']

  context = {
      'mypharmadata' : mypharmadata,
      'fname' : fname,
      'lname' : lname,
      'utype' : utype,
      'imgpath': imgpath,
        }
  template = loader.get_template('index.html')
  return HttpResponse(template.render(request=request,context=context))


 
 
def loggedin_master_home(request):
    call_command('clearsessions')
    uid=request.session.get('username', 'Invalid_User')
    if uid=='Invalid_User':
        print('Session Expired!!!')
        return redirect(request=request, to='/login')
    else:
            
        request.session['username']=uid
        # print(uid)
        # url_home = '/home' + '?uname=' + uid
        mypharmadata=Pharmacy_Details.objects.all().first()
        imgpath=request.session['imgpath']
        fname=request.session['fname']
        lname=request.session['lname']
        utype=request.session['utype']
        #   uname=request.session['username']
        context = {
            'mypharmadata' : mypharmadata,
            'fname' : fname,
            'lname' : lname,
            'utype' : utype,
            'imgpath': imgpath,
                }
        # return redirect(request=request, to=url_home)
        template = loader.get_template('index.html')
        return HttpResponse(template.render(request=request,context=context))




def master_login(request):
  call_command('clearsessions')
  form=Web_Login_Form()
  form.method='POST'
  return render(request,
                'login.html',
                {'form':form}
                )
  # template = loader.get_template('login.html')
  # return HttpResponse(template.render())


@csrf_exempt 
def logoutPage(request):
  call_command('clearsessions')
  print("logout called view!!!")

  if 'username' in request.session:
      del request.session['username']
  logout(request)
  # template = loader.get_template('logout.html')
  # return HttpResponse(template.render(request=request))
  print('after logout!!')
  return render(request, 'logout.html', {'error': 'Logged out successfully !!!'})


def signup(request):
  call_command('clearsessions')
  # model = Web_User
  form=Web_User_Form()
  form.method='POST'
  # template_name='signup.html'
  # uid = request.POST.get('userName')
  # passwd = request.POST.get('password')
  # request.session['username']=uid
  return render(request,
            'signup.html',
            {'form': form})
  # template = loader.get_template('signup.html')
  # return HttpResponse(template.render())

def createuser_view(request):
    call_command('clearsessions')
    uname = request.POST.get('userName')
    upasswd = request.POST.get('password')
    utype = request.POST.get('usertype')
    uemail = request.POST.get('useremail')
    ucontact = request.POST.get('usercontact')
    dtjoined=request.POST.get('date_joined')

    uisactive = request.POST.get('userisactive')
    # user = User.objects.create_user(request,username=uname,password=upasswd,usertype=utype,
    #                                 useremail=uemail, usercontact=ucontact, userisactive=uisactive)
    user = User.objects.create_user(username=uname, password=upasswd, useremail=uemail)
    user.save()
    template = loader.get_template('/login.html')
    return HttpResponse(template.render())

@csrf_exempt   
def master_signup(request):
    call_command('clearsessions')
    
    if request.method=='POST':
        form=Web_User_Form(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            print('User Created Successfully!!!')
            request.session['uname']=request.POST.get('username')
            uid=request.POST.get('username')
            # return redirect(request=request, to='/Image_Upload?uname=' + uid)
            return redirect(request=request, to='/login')
        else:
            return redirect(request=request, to='/signup')


@csrf_exempt
@never_cache
def master_login_check(request):  
  call_command('clearsessions')
  form=Web_Login_Form(request.POST)
  if request.method == 'POST':
        uid = request.POST.get('username')
        passwd = request.POST.get('password')
        # uid=form.cleaned_data['username']
        # passwd=form.cleaned_data['password']
       
        # print('UID:', uid, 'Passwd:',passwd)
        user = authenticate(request=request, username=uid, password=passwd)
      
        if user is not None:
            login(request, user)
            # mypharmadata=Pharmacy_Details.objects.all().values()
            request.session['username']=uid
            myuserdata=Web_User.objects.filter(username=uid).values()
            imgpath=myuserdata.values()[0]['path']
            fname=myuserdata.values()[0]['first_name']
            lname=myuserdata.values()[0]['last_name']
            utype=myuserdata.values()[0]['user_type']
            print(imgpath, fname, lname, utype)
            request.session['imgpath']=imgpath
            request.session['fname']=fname
            request.session['lname']=lname
            request.session['utype']=utype
            
            context = {
                'uname' : uid,
                'fname' : fname,
                'lname' : lname,
                'utype' : utype,
                'imgpath': imgpath,
            }
            url_home = '/home' + '?uname=' + uid
          
            # return redirect(request=request, to=url_home, context=context)  # Redirect to your home page
            template = loader.get_template('index.html')
            return HttpResponse(template.render(request=request,context=context))
        
        else:
            # Handle invalid login
            return render(request, 'logout.html', {'error': 'Invalid login credentials !!!'})
  else:
        return render(request, 'login.html',  {'error': 'no'})
       


@csrf_exempt
@never_cache
def pharma_data_view(request):
    myphrmadata_obj=Pharmacy_Details.objects.all()
    results = [{'pharmaname': item.pharmaname, 'pharmaweburl': item.pharmaweburl, 'proprietorname': item.proprietorname,'proprietorcontact': item.proprietorcontact, 'proprietoremail': item.proprietoremail} for item in myphrmadata_obj]    
    return JsonResponse(results, safe=False)


# @csrf_exempt
# @never_cache
# def customer_view(request): 
#     print("Customer View Called!!!")
#     return redirect(request=request, to='/loggedin_master_home')


#################################### SUPPLIER ########################################


def supplier_home(request):
  call_command('clearsessions')
  if 'username' not in request.session:
     print('key expired!!!') 
     return redirect('logout/')
  else:
     print(request.session['imgpath'])
     supplierdata=SupplierMaster.objects.all()
     supplierform=frm_suppliermaster()
     supplierform.method='POST'
     uname=request.session['username']

     mypharmadata=Pharmacy_Details.objects.all().first()
    
     imgpath=request.session['imgpath']
     fname=request.session['fname']
     lname=request.session['lname']
     utype=request.session['utype']
    #  print(imgpath)
     context = {
        'mypharmadata' : mypharmadata,
        'supplierdata' : supplierdata,
        'supplierform': supplierform,
        'imgpath' : imgpath,
        'fname' : fname,
        'lname' : lname,
        'utype' : utype,
        'uname' : uname,
     }
     template = loader.get_template('supplier_home.html')
     return HttpResponse(template.render(request=request,context=context))
  
def search_supplier_home(request, sup_search):
      sup_obj=SupplierMaster.objects.filter(supplier_name__icontains=sup_search)
      results = [{'supplierid': item.supplierid, 'supplier_name': item.supplier_name, 'supplier_type': item.supplier_type, 'supplier_mobile': item.supplier_mobile, 'supplier_whatsapp': item.supplier_whatsapp, 'supplier_emailid': item.supplier_emailid, 'supplier_spoc': item.supplier_spoc, 'supplier_dlno': item.supplier_dlno, 'supplier_gstno': item.supplier_gstno} for item in sup_obj]    
      return JsonResponse(results, safe=False)


def supplier_select_view(request, supplier_to_match):
      sup_obj=SupplierMaster.objects.filter(supplierid__icontains=supplier_to_match)
      results = [{'supplierid': item.supplierid, 'supplier_name': item.supplier_name, 'supplier_type': item.supplier_type, 'supplier_address': item.supplier_address, 'supplier_mobile': item.supplier_mobile, 'supplier_whatsapp': item.supplier_whatsapp, 'supplier_emailid': item.supplier_emailid, 'supplier_spoc': item.supplier_spoc, 'supplier_dlno': item.supplier_dlno, 'supplier_gstno': item.supplier_gstno} for item in sup_obj]    
      return JsonResponse(results, safe=False)


@csrf_exempt 
def supplier_edit(request):
    call_command('clearsessions')
    sid=request.GET.get('sid')
    supplier_obj=SupplierMaster.objects.get(supplierid=sid)
    form=frm_suppliermaster(instance=supplier_obj)
    form.method='POST'
    

    context = {
       'supplier_form' : form,
       'sid' : sid,
    }
   #  return redirect(request=request, context=context, to='courses_full_details.html')
    template = loader.get_template('supplier_update.html')
    return HttpResponse(template.render(request=request,context=context))


@csrf_exempt   
def supplier_update(request):
    call_command('clearsessions')
    if request.method=='POST':
        sid=int(request.GET.get('sid'))
        supplier=SupplierMaster.objects.get(supplierid=sid)
        supplier.supplier_name=request.POST['supplier_name']
        supplier.supplier_type=request.POST['supplier_type']
        supplier.supplier_address=request.POST['supplier_address']
        supplier.supplier_mobile=request.POST['supplier_mobile']
        supplier.supplier_whatsapp=request.POST['supplier_whatsapp']
        supplier.supplier_emailid=request.POST['supplier_emailid']
        supplier.supplier_spoc=request.POST['supplier_spoc']
        supplier.supplier_dlno=request.POST['supplier_dlno']  
        supplier.supplier_gstno=request.POST['supplier_gstno']
        supplier.supplier_bank=request.POST['supplier_bank']
        supplier.supplier_bankaccountno=request.POST['supplier_bankaccountno']
        supplier.supplier_bankifsc=request.POST['supplier_bankifsc']
        supplier.supplier_upi=request.POST['supplier_upi']
        supplier.save()
        print('Supplier Information Updated!!!')
        return redirect(request=request, to='/supplier_home')
    else:
        return redirect(request=request, to='/supplier_home')


def supplier_add(request):
  call_command('clearsessions')
  supplier_form=frm_suppliermaster()

  supplier_form.method='POST'
  return render(request,
                'supplier_home.html',
                {'supplier_form':supplier_form}
                )


@csrf_exempt   
def supplier_addition(request):
    call_command('clearsessions')
    if request.method=='POST':
      
        form=frm_suppliermaster(request.POST,request.FILES)
        if form.is_valid():
            form.save()
            print('Supplier added successfully!!!')
            return redirect(request=request, to='/supplier_home')
        else:
            messages.add_message(request, messages.INFO, form.errors)
            return redirect(request=request, to='/supplier_home')
    else:
         form=frm_suppliermaster(request.POST,request.FILES)

    return redirect(request=request, to='/supplier_home')
    

@csrf_exempt   
def supplier_delete(request, suppl_id):
    call_command('clearsessions')
    supplier=SupplierMaster.objects.get(supplierid=suppl_id) 
    if supplier is not None:
        supplier.delete()
        print('Supplier Deleted Succesfully!!!')
    else:
        print("Supplier with such details, does not exist !!!")
      
    return redirect(request=request, to='/supplier_home')




#################################### CUSTOMER ########################################
def customer_home(request):
  call_command('clearsessions')
  if 'username' not in request.session:
     print('key expired!!!') 
     return redirect('logout/')
  else:
   #   print(request.session['pass_key'])
     customerdata=CustomerMaster.objects.all()
     customerform=frm_customermaster()
     customerform.method='POST'
     uname=request.session['username']

     mypharmadata=Pharmacy_Details.objects.all().first()
    
     imgpath=request.session['imgpath']
     fname=request.session['fname']
     lname=request.session['lname']
     utype=request.session['utype']
     context = {
        'mypharmadata' : mypharmadata,
        'customerdata' : customerdata,
        'customerform':customerform,
        'imgpath' : imgpath,
        'fname' : fname,
        'lname' : lname,
        'utype' : utype,
     }
     template = loader.get_template('customer_home.html')
     return HttpResponse(template.render(request=request,context=context))

 
def search_customer_home(request, cust_search):
      cust_obj=CustomerMaster.objects.filter(customer_name__icontains=cust_search)
    # for s in supp_obj:
    #     supplier_names.append(s['supplier_name'])
      results = [{'customerid': item.customerid, 'customer_name': item.customer_name, 'customer_type': item.customer_type, 'customer_mobile': item.customer_mobile, 'customer_whatsapp': item.customer_whatsapp, 'customer_emailid': item.customer_emailid, 'customer_spoc': item.customer_spoc, 'customer_dlno': item.customer_dlno, 'customer_gstno': item.customer_gstno} for item in cust_obj]    
    
      return JsonResponse(results, safe=False)

@csrf_exempt 
def customer_edit(request):
    call_command('clearsessions')
    sid=request.GET.get('sid')
    # print(sid)
    customer_obj=CustomerMaster.objects.get(customerid=sid)
    # print(customer_obj)
    form=frm_customermaster(instance=customer_obj)
    form.method='POST'
    

    context = {
       'customer_form' : form,
       'sid' : sid,
    }
   #  return redirect(request=request, context=context, to='courses_full_details.html')
    template = loader.get_template('customer_update.html')
    return HttpResponse(template.render(request=request,context=context))


@csrf_exempt   
def customer_update(request):
    call_command('clearsessions')
    if request.method=='POST':
        cid=int(request.GET.get('sid'))
        customer=CustomerMaster.objects.get(customerid=cid)
        customer.customer_name=request.POST['customer_name']
        customer.customer_type=request.POST['customer_type']
        customer.customer_address=request.POST['customer_address']
        customer.customer_mobile=request.POST['customer_mobile']
        customer.customer_whatsapp=request.POST['customer_whatsapp']
        customer.customer_emailid=request.POST['customer_emailid']
        customer.customer_spoc=request.POST['customer_spoc']
        customer.customer_dlno=request.POST['customer_dlno']  
        customer.customer_gstno=request.POST['customer_gstno']
        customer.customer_bank=request.POST['customer_bank']
        customer.customer_bankaccountno=request.POST['customer_bankaccountno']
        customer.customer_bankifsc=request.POST['customer_bankifsc']
        customer.customer_upi=request.POST['customer_upi']
        customer.save()
        print('customer Information Updated!!!')
        return redirect(request=request, to='/customer_home')
    else:
        return redirect(request=request, to='/customer_home')


def customer_add(request):
  call_command('clearsessions')
  customer_form=frm_customermaster()

  customer_form.method='POST'
  return render(request,
                'customer_home.html',
                {'customer_form':customer_form}
                )
  # template = loader.get_template('courses_add.html')
  # return HttpResponse(template.render())

@csrf_exempt   
def customer_addition(request):
    call_command('clearsessions')
    if request.method=='POST':
        form=frm_customermaster(request.POST,request.FILES)
        if form.is_valid():
            form.save()
            print('customer added successfully!!!')
            return redirect(request=request, to='/customer_home')
        else:
             messages.add_message(request, messages.INFO, form.errors)  
             return redirect(request=request, to='/customer_home')
    else:
        return redirect(request=request, to='/customer_home')

@csrf_exempt   
def customer_delete(request, cust_id):
    call_command('clearsessions')
    customer=CustomerMaster.objects.get(customerid=cust_id) 
    if customer is not None:
        customer.delete()
        print('Customer Deleted Succesfully!!!')
    else:
        print("Customer with such details, does not exist !!!")
      
    return redirect(request=request, to='/customer_home')






#################################### PRODUCT ########################################
def product_home(request):
  call_command('clearsessions')
  if 'username' not in request.session:
     print('key expired!!!') 
     return redirect('logout/')
  else:
   #   print(request.session['pass_key'])
     pg_no=int(request.GET.get('pgno'))
    #  print(pg_no,type(pg_no))
     productdata=ProductMaster.objects.all()
     productrateform=frm_productratemaster()
     productdata.order_by('productid')
     rec_count=len(productdata)
     page_count=rec_count // 500
     if rec_count % 500 > 0 :
         page_count += 1
     productform=frm_productmaster()
     productform.method='POST'
     mypharmadata=Pharmacy_Details.objects.all().first()

     uname=request.session['username']
     imgpath=request.session['imgpath']
     fname=request.session['fname']
     lname=request.session['lname']
     utype=request.session['utype']
        
     context = {
        'mypharmadata' : mypharmadata,
        'productdata' : productdata[(pg_no-1)*500:(500*pg_no)],
        'productform':productform,
        'productrateform': productrateform,
        'imgpath' : imgpath,
        'fname' : fname,
        'lname' : lname,
        'utype' : utype,
        'rec_count' : rec_count,
        'pg_no' : pg_no,
        'page_count' : page_count,
        'n' : range(1, page_count+1),
     }
     template = loader.get_template('product_home.html')
     return HttpResponse(template.render(request=request,context=context))
  
def search_product_home(request, prod_search):
      prod_obj=ProductMaster.objects.filter(product_name__icontains=prod_search)
    # for s in supp_obj:
    #     supplier_names.append(s['supplier_name'])
      results = [{'productid': item.productid, 'product_name': item.product_name, 'product_company': item.product_company, 'product_packing': item.product_packing} for item in prod_obj]    
      return JsonResponse(results, safe=False)




def product_page_load(request,pgno):
      prod_obj=ProductMaster.objects.all()[(pgno-1)*500:500*pgno]
    #   print(len(prod_obj))
      results = [{'productid': item.productid, 'product_name': item.product_name, 'product_company': item.product_company, 'product_packing': item.product_packing, 'product_category': item.product_category, 'product_salt': item.product_salt} for item in prod_obj]    
      return JsonResponse(results, safe=False)



@csrf_exempt 
def product_display(request):
    call_command('clearsessions')
    sid=request.GET.get('sid')
    pg_no=request.GET.get('pgno')
    # print(sid)
    productdata=ProductMaster.objects.get(productid=sid)
    
   
    context = {
   
       'productdata' : productdata,
       'sid' : sid,
       'pg_no' : pg_no,
    }
   #  return redirect(request=request, context=context, to='courses_full_details.html')
    template = loader.get_template('product_display.html')
    return HttpResponse(template.render(request=request,context=context))

@csrf_exempt 
def product_edit(request, pgno, prod_id):
    call_command('clearsessions')
    # sid=request.GET.get('sid')
    # pgno=request.GET.get('pgno')
    # print('Page No in Edit= ' + str(pgno))
    product_obj=ProductMaster.objects.get(productid=prod_id)
    
    form=frm_productmaster(instance=product_obj)
   
    context = {
   
       'product_form' : form,
       'sid' : prod_id,
       'pg_no': pgno,
        }
   #  return redirect(request=request, context=context, to='courses_full_details.html')
    template = loader.get_template('product_update.html')
    return HttpResponse(template.render(request=request,context=context))


# @csrf_exempt   
# def product_update(request):
#     call_command('clearsessions')
#     pgno=request.GET.get('pgno')
#     print('This is my page no ' + pgno)
#     if request.method=='POST':
#         pid=int(request.GET.get('sid')) 
#         # old_image=request.FILES['product_image']
#         # print(request.FILES['product_image'])
#         # print(old_image)
#         print('This is demo error chk -- ',pid)
#         product=ProductMaster.objects.get(productid=pid)
#         cur_image=product.product_image
#         product.product_name=request.POST['product_name']
#         product.product_company=request.POST['product_company']
#         product.product_packing=request.POST['product_packing']
       
#         if len(request.FILES)!=0:
#             product.product_image=request.FILES['product_image']
#         else:
#             pass
#         product.save()
#         # if os.path.exists(cur_image):
#         #     os.remove(cur_image)
#         # old_image=ProductMaster.objects.filter(productid=request.POST['productid'])
#         # frm_image_update=frm_productmaster(request.POST, request.FILES, instance=old_image)
#         # if frm_image_update.is_valid():
#         #     image_path=old_image.product_image
#         #     if os.path.e
#         print('Product Information Updated!!!')
#         return redirect(request=request, to='/product_home?pgno=' + pgno)
#     else:
#         return redirect(request=request, to='/product_home?pgno=' + pgno)


@csrf_exempt   
def product_update(request, pgno, prod_id):
    call_command('clearsessions')
    # pgno=request.GET.get('pgno')
    print('This is my page no ' + str(pgno))
    if request.method=='POST':
        # pid=int(request.GET.get('sid')) 
        # old_image=request.FILES['product_image']
        # print(request.FILES['product_image'])
        # print(old_image)
        print('This is demo error chk -- ', prod_id)
        product=ProductMaster.objects.get(productid=prod_id)
        cur_image=product.product_image
        product.product_name=request.POST['product_name']
        product.product_company=request.POST['product_company']
        product.product_packing=request.POST['product_packing']
        product.product_category=request.POST['product_category']
        product.product_salt=request.POST['product_salt']
        # print(len(request.FILES))
        # print(request.FILES)
        if len(request.FILES) > 0:
            product.product_image=request.FILES['product_image']
        else:
            pass
        product.save()
        # if os.path.exists(cur_image):
        #     os.remove(cur_image)
        # old_image=ProductMaster.objects.filter(productid=request.POST['productid'])
        # frm_image_update=frm_productmaster(request.POST, request.FILES, instance=old_image)
        # if frm_image_update.is_valid():
        #     image_path=old_image.product_image
        #     if os.path.e
        print('Product Information Updated!!!')
        return redirect(request=request, to='/product_home?pgno=' + str(pgno))
    else:
        return redirect(request=request, to='/product_home?pgno=' + str(pgno))

def product_add(request):
  call_command('clearsessions')
  product_form=frm_productmaster()

  product_form.method='POST'
  return render(request,
                'product_home.html',
                {'product_form':product_form}
                )
  # template = loader.get_template('courses_add.html')
  # return HttpResponse(template.render())

@csrf_exempt   
def product_addition(request):
    call_command('clearsessions')
    pg_no=request.GET.get('pgno')
    # print(pg_no)
    if request.method=='POST':
       
        form=frm_productmaster(request.POST,request.FILES)      
        
        if form.is_valid():
            form.save()
            print('Product added successfully!!!')
            return redirect(request=request, to='/product_home?pgno=' + pg_no)
        else:
            messages.add_message(request, messages.INFO, form.errors)
            return redirect(request=request, to='/product_home?pgno=' + pg_no)
            
    else:
        return redirect(request=request, to='/product_home?pgno=' + pg_no)
    

@csrf_exempt   
def product_rate_addition(request):
    call_command('clearsessions')
    # pg_no=request.GET.get('pgno')
    # # print(pg_no)
    if request.method=='POST':
       
        form=frm_productratemaster(request.POST)      
        
        if form.is_valid():
            form.save()
            print('Product rate added successfully!!!')
            return JsonResponse({'success': True, 'message': 'Record deleted successfully'})
        else:
            messages.add_message(request, messages.INFO, form.errors)
            return JsonResponse({'success': False, 'message': 'Invalid request'}, status=400)
            
    # else:
    #     return redirect(request=request, to='/product_home?pgno=' + pg_no)
    

def get_product_rates(request):
      prod_rate_obj=ProductRateMaster.objects.all()
      results = [{'id' : item.id,'rate_productid': item.rate_productid.productid, 'rate_product_name': item.rate_productid.product_name, 'rate_A': item.rate_A, 'rate_B': item.rate_B, 'rate_C': item.rate_C, 'rate_date': item.rate_date} for item in prod_rate_obj]    
      print(results)
      return JsonResponse(results, safe=False)

def get_product_batches(request, prod_id):
      pur_qty_obj=PurchaseMaster.objects.filter(productid=prod_id).values('productid', 'product_batch_no').annotate(product_quantity=Sum('product_quantity')) 
      sale_qty_obj=SalesMaster.objects.filter(productid=prod_id).values('productid', 'product_batch_no').annotate(sale_quantity=Sum('sale_quantity'))
      print(pur_qty_obj)
      print(sale_qty_obj)
      avail_qty_dict=[]
      for i in pur_qty_obj:
          avail_qty=i['product_quantity']
          prod_batch=i['product_batch_no']
          for j in sale_qty_obj:
              if i['product_batch_no']==j['product_batch_no']:
                  avail_qty=i['product_quantity']-j['sale_quantity']
          ret_pur_qty_obj=ReturnPurchaseMaster.objects.filter(returnproductid=prod_id, returnproduct_batch_no__iexact=prod_batch.strip()).aggregate(Sum('returnproduct_quantity'))
          if ret_pur_qty_obj["returnproduct_quantity__sum"] is None:
              ret_pur_qty_obj["returnproduct_quantity__sum"]=0
          avail_qty-=ret_pur_qty_obj["returnproduct_quantity__sum"]

          ret_sales_qty_obj=ReturnSalesMaster.objects.filter(return_sales_productid=prod_id, return_sales_product_batch_no__iexact=prod_batch.strip()).aggregate(Sum('return_sales_sale_quantity'))
          if ret_sales_qty_obj["return_sales_sale_quantity__sum"] is None:
              ret_sales_qty_obj["return_sales_sale_quantity__sum"]=0
          avail_qty+=ret_sales_qty_obj["return_sales_sale_quantity__sum"]

          avail_qty_dict.append({'product_batch_no': prod_batch,'available_quantity': avail_qty})
      print(avail_qty_dict)
      results=avail_qty_dict
      return JsonResponse(results, safe=False)

@csrf_exempt   
def product_rate_delete(request, rate_id):
    call_command('clearsessions')
    rate_obj=ProductRateMaster.objects.get(id=rate_id) 
    if rate_obj is not None:
        rate_obj.delete()
        print('Product Rate Entry Deleted Succesfully!!!')
        return JsonResponse({'success': True, 'message': 'Record deleted successfully'})
    else:
        print("Product Rate Entry with such details, does not exist !!!")
        return JsonResponse({'success': False, 'message': 'Invalid request'}, status=400)
 

@csrf_exempt   
def product_delete(request, prod_id):
    call_command('clearsessions')
    pg_no=request.GET.get('pgno')
    product=ProductMaster.objects.get(productid=prod_id) 
    if product is not None:
        product.delete()
        print('Product Deleted Succesfully!!!')
    else:
        print("Product with such details, does not exist !!!")
      
    return redirect(request=request, to='/product_home?pgno=' + pg_no)    
    

    #################################### PURCHASE ########################################
@csrf_exempt  
def purchase_home(request):
  call_command('clearsessions')
  if 'username' not in request.session:
     print('key expired!!!') 
     return redirect('logout/')
  else:
   #   print(request.session['pass_key'])
     purchasedata=PurchaseMaster.objects.all()
     invoicedata=InvoiceMaster.objects.all()
     purchaseform=frm_purchasemaster()
     purchaseform.method='POST'
     editpurchaseform=frm_purchaseeditmaster()
     editpurchaseform.method='POST'
     invoiceform=frm_invoicemaster()
     invoicepaidform=frm_invoicepaid()
     invoiceformedit=frm_invoicemaster_edit()

     mypharmadata=Pharmacy_Details.objects.all().first()
  
     uname=request.session['username']
     imgpath=request.session['imgpath']
     fname=request.session['fname']
     lname=request.session['lname']
     utype=request.session['utype']
        
     context = {
        'mypharmadata' : mypharmadata,
        'invoicedata' : invoicedata,
        'purchasedata' : purchasedata,
        'purchaseform': purchaseform,
        'editpurchaseform' : editpurchaseform,
        'invoiceform' : invoiceform,
        'invoicepaidform' : invoicepaidform,
        'invoiceformedit' : invoiceformedit,
        'imgpath' : imgpath,
        'fname' : fname,
        'lname' : lname,
        'utype' : utype,
     }
     template = loader.get_template('purchase_home.html')
     return HttpResponse(template.render(request=request,context=context))


@csrf_exempt  
def purchase_add_home(request, supplid, invno):
  call_command('clearsessions')
  if 'username' not in request.session:
     print('key expired!!!') 
     return redirect('logout/')
  else:
   #   print(request.session['pass_key'])
     purchasedata=PurchaseMaster.objects.all()
     supplierdata=SupplierMaster.objects.filter(supplierid=supplid)
     invoicedata=InvoiceMaster.objects.filter(invoice_no=invno)
     purchaseform=frm_purchasemaster()
     purchaseform.method='POST'
     invoiceform=frm_invoicemaster()
     uname=request.session['username']
     imgpath=request.session['imgpath']
     fname=request.session['fname']
     lname=request.session['lname']
     utype=request.session['utype']
        
     context = {
        'supplierdata' : supplierdata,
        'invoicedata' : invoicedata,
        'purchasedata' : purchasedata,
        'purchaseform': purchaseform,
        'invoiceform' : invoiceform,
        'imgpath' : imgpath,
        'fname' : fname,
        'lname' : lname,
        'utype' : utype,
     }
     template = loader.get_template('purchase_home.html')
     return HttpResponse(template.render(request=request,context=context))  



@csrf_exempt 
def purchase_edit(request, purid, invno, supplid, prodid):
    call_command('clearsessions')
    # print(prodid)
    uname=request.session['username']
    imgpath=request.session['imgpath']
    fname=request.session['fname']
    lname=request.session['lname']
    utype=request.session['utype']
    purchase_obj=PurchaseMaster.objects.get(purchaseid=purid, product_supplierid=supplid)
    purchase_form=frm_purchasemaster(instance=purchase_obj)
    inv_obj=InvoiceMaster.objects.get(invoice_no=invno, supplierid=supplid)  
    suppl_obj=SupplierMaster.objects.get(supplierid=supplid)
    prod_obj=ProductMaster.objects.get(productid=prodid)  
    # print(prod_obj.product_hsn, prod_obj.product_hsn_percent)
    context = {
       'purchaseform' : purchase_form,
       'invoiceobj' : inv_obj,
       'supplobj' : suppl_obj,
       'purid' : purid,
       'product_hsn' : prod_obj.product_hsn,
       'product_hsn_percent': prod_obj.product_hsn_percent,
        'imgpath' : imgpath,
        'fname' : fname,
        'lname' : lname,
        'utype' : utype,
    }
    template = loader.get_template('purchase_update_final.html')
    return HttpResponse(template.render(request=request,context=context))


@csrf_exempt   
def purchase_update(request, purid):
    call_command('clearsessions')
    if request.method=='POST':   
        # print('This is demo error chk -- ',purid)
        purcshase=PurchaseMaster.objects.get(purchaseid=purid)
        prodid=purcshase.productid.productid
        print(prodid)
        batchno=purcshase.product_batch_no
        new_purchase_qty=request.POST['product_quantity']
        pur_qty_obj=PurchaseMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).exclude(purchaseid=purid).aggregate(Sum('product_quantity'))
        sale_qty_obj=SalesMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('sale_quantity'))
        ret_pur_qty_obj=ReturnPurchaseMaster.objects.filter(returnproductid=prodid, returnproduct_batch_no__iexact=batchno.strip()).aggregate(Sum('returnproduct_quantity'))
        ret_sale_qty_obj=ReturnSalesMaster.objects.filter(return_sales_productid=prodid, return_sales_product_batch_no__iexact=batchno.strip()).aggregate(Sum('return_sales_sale_quantity'))
        
        if pur_qty_obj["product_quantity__sum"] is None:
            pur_qty_obj["product_quantity__sum"]=0
        if sale_qty_obj["sale_quantity__sum"] is None:
            sale_qty_obj["sale_quantity__sum"]=0
        if ret_pur_qty_obj["returnproduct_quantity__sum"] is None:
            ret_pur_qty_obj["returnproduct_quantity__sum"]=0
        if ret_sale_qty_obj["return_sales_sale_quantity__sum"] is None:
            ret_sale_qty_obj["return_sales_sale_quantity__sum"]=0
        edit_qualification=(float(pur_qty_obj["product_quantity__sum"])+float(new_purchase_qty)+float(ret_sale_qty_obj["return_sales_sale_quantity__sum"]))-float(sale_qty_obj["sale_quantity__sum"])-float(ret_pur_qty_obj["returnproduct_quantity__sum"])
        
        if edit_qualification>=0:
            supplier_instance=SupplierMaster.objects.get(supplierid=request.POST['product_supplierid'])
            purcshase.product_name=request.POST['product_name']
            purcshase.product_company=request.POST['product_company']
            purcshase.product_packing=request.POST['product_packing']
            purcshase.product_batch_no=request.POST['product_batch_no']
            purcshase.product_expiry=request.POST['product_expiry']
            purcshase.product_MRP=request.POST['product_MRP']
            purcshase.product_purchase_rate=request.POST['product_purchase_rate']
            purcshase.product_actual_rate=request.POST['product_actual_rate']  
            purcshase.product_quantity=request.POST['product_quantity']
            purcshase.product_scheme=request.POST['product_scheme']

            purcshase.product_discount_got=request.POST['product_discount_got']
            purcshase.product_transportation_charges=request.POST['product_transportation_charges']
            purcshase.IGST=request.POST['IGST']
            purcshase.total_amount=request.POST['total_amount']   
            purcshase.purchase_entry_date=request.POST['purchase_entry_date']     

            purcshase.product_supplierid=supplier_instance
            purcshase.product_invoice_no=request.POST['product_invoice_no']
            purcshase.save()
            print('Purchase Information Updated!!!')
            return JsonResponse({'success': 'success', 'message': 'Record Updated successfully.'})
        else:
           print("Purchase Entry with such details, does not exist !!!")
           return JsonResponse({'success': False, 'message': 'This deletion will cause inconsistency in sales!!!'}, status=406)

       
    # else:
    #     return JsonResponse({'status': 'error', 'message': 'Form is invalid.'})
    #     # return redirect(request=request, to='/purchase_home')
    # return JsonResponse({'status': 'error', 'message': 'Invalid request method.'})


@csrf_exempt   
def purchase_delete(request, purid):
    call_command('clearsessions')
    pur_obj=PurchaseMaster.objects.get(purchaseid=purid) 
    prodid=pur_obj.productid.productid
    batchno=pur_obj.product_batch_no
    print(prodid, batchno)
    pur_qty_obj=PurchaseMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).exclude(purchaseid=purid).aggregate(Sum('product_quantity'))
    sale_qty_obj=SalesMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('sale_quantity'))
    ret_pur_qty_obj=ReturnPurchaseMaster.objects.filter(returnproductid=prodid, returnproduct_batch_no__iexact=batchno.strip()).aggregate(Sum('returnproduct_quantity'))
    ret_sale_qty_obj=ReturnSalesMaster.objects.filter(return_sales_productid=prodid, return_sales_product_batch_no__iexact=batchno.strip()).aggregate(Sum('return_sales_sale_quantity'))
    print(ret_sale_qty_obj)
    if pur_qty_obj["product_quantity__sum"] is None:
        pur_qty_obj["product_quantity__sum"]=0
    if sale_qty_obj["sale_quantity__sum"] is None:
        sale_qty_obj["sale_quantity__sum"]=0
    if ret_pur_qty_obj["returnproduct_quantity__sum"] is None:
        ret_pur_qty_obj["returnproduct_quantity__sum"]=0
    if ret_sale_qty_obj["return_sales_sale_quantity__sum"] is None:
        ret_sale_qty_obj["return_sales_sale_quantity"]=0
    delete_qualification=(float(pur_qty_obj["product_quantity__sum"])+float(ret_sale_qty_obj["return_sales_sale_quantity"]))-float(sale_qty_obj["sale_quantity__sum"])-float(ret_pur_qty_obj["returnproduct_quantity__sum"])
    print(delete_qualification)
    if delete_qualification>=0:
        if pur_obj is not None:
            pur_obj.delete()
            print('Purchase Entry Deleted Succesfully!!!')
            return JsonResponse({'success': True, 'message': 'Record deleted successfully bro m der!!'})
        else:
            print("Purchase Entry with such details, does not exist !!!")
            return JsonResponse({'success': False, 'message': 'Purchase Entry with such details, does not exist !!!'})
    else:
        return JsonResponse({'success': False, 'message': 'This deletion will cause inconsistency in sales!!!'})



def purchase_add(request):
  call_command('clearsessions')
  purchase_form=frm_purchasemaster()

  purchase_form.method='POST'
  return render(request,
                'purchase_home.html',
                {'purchase_form':purchase_form}
                )
  # template = loader.get_template('courses_add.html')
  # return HttpResponse(template.render())

@csrf_exempt   
def purchase_addition(request):
    call_command('clearsessions')
    try:
        # suppl_data=SupplierMaster.objects.filter(supplierid=supplid)
        # inv_data=InvoiceMaster.objects.filter(invoice_no=invno)
        if request.method=='POST':
            form=frm_purchasemaster(request.POST)
            if form.is_valid():
                # print('Form is valid!!!')
                # print('allright!!!')
                supplid=request.POST.get('product_supplierid')
                invno=request.POST.get('product_invoice_no')
                # print(form.data["product_suppliername"])
                context ={
                    'purchaseform' : form,
                }        
                form.save()
                               
                messages.add_message(request, messages.INFO, form.errors)
                return JsonResponse({'success': True, 'message': 'Record Saved successfully'})
            else:
                # print("In Else", form.errors)
                return JsonResponse({'success': False, 'errors': form.errors})
        else:
            print("This is GET Way!!")
            form=frm_purchasemaster()
    except Exception as e:
        print(e)  
    return JsonResponse({'success': False, 'message': 'Invalid request'})
    # return redirect(request=request, to='/purchase_home', context=context)    
    # return redirect(request=request, to='/purchase_add_home/' + supplid + "/" + invno, context=context)






def customer_view(request):
    sid=request.GET.get('cid')
    cust_obj=CustomerMaster.objects.filter(customerid=sid)
    data = {
        
        'cust_obj' : cust_obj.values()[0],
    }
    return JsonResponse(data)

def product_view(request):
    sid=request.GET.get('pid')
    prod_obj=ProductMaster.objects.filter(productid=sid)
    data = {
       
        'prod_obj' : prod_obj.values()[0],
    }
    return JsonResponse(data)

def supplier_view(request):
    sid=request.GET.get('sid')
    # print(sid)
    sup_obj=SupplierMaster.objects.filter(supplierid=sid)
    
    data = {
        
        'sup_obj' : sup_obj.values()[0],
    }
    return JsonResponse(data)


def purchase_view(request):
    pur_id=request.GET.get('pur_id')

    purchase_obj=PurchaseMaster.objects.filter(purchaseid=pur_id)
  
    data = {
        
        'purchase_obj' : purchase_obj.values()[0],
    }
    return JsonResponse(data)


# def get_customer_names(request, str_to_match):
       
#     cust_obj=CustomerMaster.objects.filter(customer_name__icontains=str_to_match)
#     # for s in supp_obj:
#     #     supplier_names.append(s['supplier_name'])
#     results = [{'customerid': item.supplierid, 'customer_name': item.customer_name, 'customer_emailid': item.customer_emailid,'customer_mobile': item.customer_mobile} for item in cust_obj]    
#     return JsonResponse(results, safe=False)

def get_supplier_names(request, str_to_match):
    if str_to_match == "*":
        supp_obj=SupplierMaster.objects.all()
    else:
        supp_obj=SupplierMaster.objects.filter(supplier_name__icontains=str_to_match)
    results = [{'supplierid': item.supplierid, 'supplier_name': item.supplier_name, 'supplier_emailid': item.supplier_emailid,'supplier_mobile': item.supplier_mobile} for item in supp_obj]    
    return JsonResponse(results, safe=False)

def get_invoice_numbers(request, supplier):
    
    if supplier=="*":
        inv_obj=InvoiceMaster.objects.all()
    else:
        inv_obj=InvoiceMaster.objects.filter(supplierid=supplier)
    results = [{'invoice_no': item.invoice_no, 'invoice_date': item.invoice_date, 'transport_charges': item.transport_charges,'invoice_total': item.invoice_total, 'supplierid': item.supplierid.supplierid, 'supplier_name': item.supplierid.supplier_name } for item in inv_obj]    
    return JsonResponse(results, safe=False)

def invoice_select_view(request, invno, supplid):
    if invno=="":
        pass
    else:
        inv_obj=InvoiceMaster.objects.filter(invoice_no=invno, supplierid=supplid)
    results = [{'invoice_no': item.invoice_no, 'invoice_date': item.invoice_date, 'transport_charges': item.transport_charges,'invoice_total': item.invoice_total, 'supplierid': item.supplierid.supplierid, 'supplier_name': item.supplierid.supplier_name } for item in inv_obj]    
    return JsonResponse(results, safe=False)

def get_product_names(request, str_to_match):
    
    if str_to_match == "*":
        prod_obj=ProductMaster.objects.all()
    else:
        prod_obj=ProductMaster.objects.filter(product_name__icontains=str_to_match)

    results = [{'productid': item.productid, 'product_name': item.product_name, 'product_company': item.product_company,'product_packing': item.product_packing, 'product_hsn': item.product_hsn,
                 'product_hsn_percent': item.product_hsn_percent} for item in prod_obj]    
   
    return JsonResponse(results, safe=False)

def search_invoice(request, inv_no, suppl_id):
    
    purchase_master_obj=PurchaseMaster.objects.filter(product_supplierid=suppl_id,product_invoice_no=inv_no)
    results = [{'purchaseid' : item.purchaseid, 'productid': item.productid.productid, 'product_name': item.product_name,
                'product_company': item.product_company, 'product_packing': item.product_packing,
                'product_batch_no': item.product_batch_no, 'product_expiry': item.product_expiry,
                'product_MRP': item.product_MRP,'product_purchase_rate': item.product_purchase_rate,
                'product_actual_rate': item.product_actual_rate,'product_quantity': item.product_quantity,
                'product_discount_got': item.product_discount_got,'product_transportation_charges': item.product_transportation_charges,
                'product_supplierid': item.product_supplierid.supplierid, 'supplier_name': item.product_supplierid.supplier_name,
                'supplier_address': item.product_supplierid.supplier_address, 'supplier_gstno': item.product_supplierid.supplier_gstno, 
                'supplier_dlno': item.product_supplierid.supplier_dlno, 'product_invoice_no': item.product_invoice_no,
                'purchase_entry_date': item.purchase_entry_date, 'product_scheme':item.product_scheme,  
                'IGST': item.IGST, 'total_amount': item.total_amount } for item in purchase_master_obj]    
   
    return JsonResponse(results, safe=False)

def search_invoice_home(request, inv_no):
   
    purchase_master_obj=PurchaseMaster.objects.filter(product_invoice_no=inv_no)
    results = [{'purchaseid' : item.purchaseid, 'productid': item.productid.productid, 'product_name': item.product_name,
                'product_company': item.product_company, 'product_packing': item.product_packing,
                'product_batch_no': item.product_batch_no, 'product_expiry': item.product_expiry,
                'product_MRP': item.product_MRP,'product_purchase_rate': item.product_purchase_rate,
                'product_actual_rate': item.product_actual_rate,'product_quantity': item.product_quantity,
                'product_discount_got': item.product_discount_got,'product_transportation_charges': item.product_transportation_charges,
                'product_supplierid': item.product_supplierid.supplierid, 'supplier_name': item.product_supplierid.supplier_name,
                'supplier_address': item.product_supplierid.supplier_address, 'supplier_gstno': item.product_supplierid.supplier_gstno, 
                'supplier_dlno': item.product_supplierid.supplier_dlno, 'product_invoice_no': item.product_invoice_no,
                'purchase_entry_date': item.purchase_entry_date, 
                'IGST': item.IGST, 'total_amount': item.total_amount } for item in purchase_master_obj]    
   
    return JsonResponse(results, safe=False)


def get_invoice_date(request, suppl_id, inv_no):
    invoicedate_obj=InvoiceMaster.objects.filter(supplierid=suppl_id,invoice_no=inv_no) 
   
    data = {
        'invoice_date' : invoicedate_obj.invoice_date,
    }
    return JsonResponse(data, safe=False)

@csrf_exempt   
def invoicepaid_addition(request, invid):
    call_command('clearsessions')
    try:
        if request.method=='POST':
            form=frm_invoicepaid(request.POST)
            new_amount=request.POST.get('payment_amount')
            purinvpaid_obj=InvoicePaid.objects.filter(ip_invoiceid=invid).aggregate(Sum('payment_amount'))
            purinvmaster_obj=InvoiceMaster.objects.get(invoiceid=invid)
            if purinvpaid_obj["payment_amount__sum"] is None:
                purinvpaid_obj["payment_amount__sum"]=0
            if purinvmaster_obj is None:
                total_amount=0
            else:
                total_amount=purinvmaster_obj.invoice_total

            print("total_amount=", total_amount,"New Amount=",new_amount,"paid_amount",purinvpaid_obj["payment_amount__sum"])
            if total_amount > (purinvpaid_obj["payment_amount__sum"]+ float(new_amount)):
                
                if form.is_valid():
                    form.save()
                    print('Payment against invoice added!!!')
                    messages.add_message(request, messages.INFO, form.errors)
                    return JsonResponse({'success': True, 'message': 'Payment Added successfully !!'})
                else:
                    print(form.errors)
                    return JsonResponse({'success': False, 'errors': form.errors})
            else:
                print("Going thro correct path!!")
                return JsonResponse({'success': False, 'message': 'Payment Amount will exceed Total Amount !!'})

        else:
            form=frm_invoicepaid()
    except Exception as e:
        print(e)  
    return JsonResponse({'success': False, 'message': 'Invalid request'})

@csrf_exempt   
def sales_invoicepaid_addition(request):
    call_command('clearsessions')
    try:
        if request.method=='POST':
            form=frm_salesinvoicepaid(request.POST)
          
            if form.is_valid():
                form.save()
                print('Payment against invoice added!!!')
                messages.add_message(request, messages.INFO, form.errors)
                return JsonResponse({'success': True, 'message': 'Record Saved successfully'})
            else:
                print(form.errors)
                return JsonResponse({'success': False, 'errors': form.errors})
        else:
            print("This is GET Way!!")
            form=frm_salesinvoicepaid()
    except Exception as e:
        print(e)  
    return JsonResponse({'success': False, 'message': 'Invalid request'})


@csrf_exempt   
def invoice_addition(request):
    call_command('clearsessions')
    try:
        if request.method=='POST':
            form=frm_invoicemaster(request.POST)
          
            if form.is_valid():
                form.save()
                print('Invoice Created Succesfully!!!')
                return redirect(request=request, to="/purchase_home")
            else:
                messages.add_message(request, messages.INFO, form.errors)
                return redirect(request=request, to="/purchase_home")      
        else:
            form=frm_invoicemaster(request.POST)
            
    except Exception as e:
        print(e)        
    return redirect(request=request, to="/purchase_home")

@csrf_exempt   
def invoice_delete(request, invid):
    call_command('clearsessions')
    inv_obj=InvoiceMaster.objects.get(invoiceid=invid) 
    pur_obj=PurchaseMaster.objects.filter(product_invoice_no=inv_obj.invoice_no, product_supplierid=inv_obj.supplierid.supplierid).count()
   
    if pur_obj > 0:
        pass
    else:        
        if inv_obj is not None:
            inv_obj.delete()
            print('Invoce Entry Deleted Succesfully!!!')
            return JsonResponse({'success': True, 'message': 'Record deleted successfully'})
        else:
            return JsonResponse({'success': False, 'message': 'Invoice is not Empty or Invoice No does not exists !!!'})
            
            

def search_invoice_master(request, inv_no, suppl_id):
  
    invoice_master_obj=InvoiceMaster.objects.filter(supplierid=suppl_id,invoice_no=inv_no)
    results = [{'invoiceid': item.invoiceid, 'invoice_no' : item.invoice_no ,'invoice_date': item.invoice_date, 'transport_charges': item.transport_charges,
                'invoice_total': item.invoice_total,'invoice_paid': item.invoice_paid, 'supplierid' : item.supplierid.supplierid,
                'supplier_name' : item.supplierid.supplier_name, 'supplier_dlno' : item.supplierid.supplier_dlno , 'supplier_gstno' : item.supplierid.supplier_gstno,
                'supplier_address' : item.supplierid.supplier_address } for item in invoice_master_obj]    
   
    return JsonResponse(results, safe=False)

def invoice_master_edit(request, inv_id):
  
    invoice_master_obj=InvoiceMaster.objects.filter(invoiceid=inv_id)
    results = [{'invoiceid': item.invoiceid, 'invoice_no' : item.invoice_no ,'invoice_date': item.invoice_date, 'transport_charges': item.transport_charges,
                'invoice_total': item.invoice_total,'invoice_paid': item.invoice_paid, 'supplierid' : item.supplierid.supplierid,
                'supplier_name' : item.supplierid.supplier_name, 'supplier_dlno' : item.supplierid.supplier_dlno , 'supplier_gstno' : item.supplierid.supplier_gstno,
                'supplier_address' : item.supplierid.supplier_address } for item in invoice_master_obj]    
   
    return JsonResponse(results, safe=False)


def get_payment_history(request, invoice_id):
    invoicepaid_master_obj=InvoicePaid.objects.filter(ip_invoiceid=invoice_id)
    results = [{'payment_id': item.payment_id, 'ip_invoiceid': item.ip_invoiceid.invoiceid, 'payment_date': item.payment_date, 
                'payment_amount': item.payment_amount, 'payment_mode': item.payment_mode,
                'payment_ref_no': item.payment_ref_no } for item in invoicepaid_master_obj]    
   
    return JsonResponse(results, safe=False)


@csrf_exempt   
def payment_history_delete(request, payid):
    
    call_command('clearsessions')
    print(payid)
    pay_obj=InvoicePaid.objects.get(payment_id=payid) 
    if pay_obj is not None:
        pay_obj.delete()
        print('Payment Entry Deleted Succesfully!!!')
        return JsonResponse({'success': True, 'message': 'Record deleted successfully'})
    else:
        print("Payment Entry with such details, does not exist !!!")
    return JsonResponse({'success': False, 'message': 'Invalid request'}, status=400)





@csrf_exempt   
def invoice_master_update(request, inv_id):
    call_command('clearsessions')
    if request.method=='POST':
        invoice=InvoiceMaster.objects.get(invoiceid=inv_id)
        invoice.invoice_no=request.POST['invoice_no']
        invoice.invoice_date=request.POST['invoice_date']
        invoice.supplierid=SupplierMaster.objects.get(supplierid=request.POST['supplierid'])
        invoice.transport_charges=request.POST['transport_charges']
        invoice.invoice_total=request.POST['invoice_total']
        invoice.invoice_paid=request.POST['invoice_paid']
        invoice.save()
        print('Invoice Information Updated!!!')
        return redirect(request=request, to='/purchase_home')
    else:
        return redirect(request=request, to='/purchase_home')


  #################################### SALES ########################################
@csrf_exempt  
def sales_home(request):
  call_command('clearsessions')
  if 'username' not in request.session:
     print('key expired!!!') 
     return redirect('logout/')
  else:
   #   print(request.session['pass_key'])
     salesdata=SalesMaster.objects.all()
     invoicedata=SalesInvoiceMaster.objects.all()
     
     salesform=frm_salesmaster()
     salesform.method='POST'
     salesinvoiceform=frm_salesinvoicemaster()
     salesinvoicepaidform=frm_salesinvoicepaid()

     editsalesform=frm_saleseditmaster()
     editsalesform.method='POST'
       
     invoiceformedit=frm_invoicemaster_edit()

     mypharmadata=Pharmacy_Details.objects.all().first()
  
     uname=request.session['username']
     imgpath=request.session['imgpath']
     fname=request.session['fname']
     lname=request.session['lname']
     utype=request.session['utype']
        
     context = {
        'mypharmadata' : mypharmadata,
        'invoicedata' : invoicedata,
        'salesdata' : salesdata,
        'saleform': salesform,
        'editsaleform' : editsalesform,
        'salesinvoiceform' : salesinvoiceform,
        'salesinvoicepaidform' : salesinvoicepaidform,
        'invoiceformedit' : invoiceformedit,
        'imgpath' : imgpath,
        'fname' : fname,
        'lname' : lname,
        'utype' : utype,
     }
     template = loader.get_template('sales_home.html')
     return HttpResponse(template.render(request=request,context=context))
  

@csrf_exempt   
def sales_delete(request, salesid):
    call_command('clearsessions')
    sales_obj=SalesMaster.objects.get(id=salesid) 
    prodid=sales_obj.productid.productid
    batchno=sales_obj.product_batch_no
    invno=sales_obj.sales_invoice_no.sales_invoice_no
    print("Working Fine - 1 !!", batchno, invno, prodid)
    ret_sale_qty_obj=ReturnSalesMaster.objects.filter(return_sales_invoice_no=invno,return_sales_productid=prodid, return_sales_product_batch_no__iexact=batchno.strip()).aggregate(Sum('return_sales_sale_quantity'))
    print("Working Fine - 2 !!")
    if sales_obj is not None:
        if ret_sale_qty_obj["return_sales_sale_quantity__sum"] is None:
            sales_obj.delete()
            print('Sales Entry Deleted Succesfully!!')
            return JsonResponse({'success': True, 'message': 'Sales Entry Deleted Succesfully!!'})
        else:
            print('Sales Return Entry Exists for this Invoice !! Please Delete Sales Return Entry First!!')
            return JsonResponse({'success': True, 'message': 'Sales Return Entry Exists for this Invoice !! Please Delete Sales Return Entry First!!'})

    else:
        print("Sales Entry with such details, does not exist !!!")
        return JsonResponse({'success': False, 'message': 'Sales Entry with such details, does not exist !!'})

    # return JsonResponse({'success': False, 'message': 'Invalid request'}, status=400)


@csrf_exempt   
def sales_addition(request):
    call_command('clearsessions')
    try:
        # suppl_data=SupplierMaster.objects.filter(supplierid=supplid)
        # inv_data=InvoiceMaster.objects.filter(invoice_no=invno)
        if request.method=='POST':
            form=frm_salesmaster(request.POST)
            if form.is_valid():
                custid=request.POST.get('customerid')
                salesinvno=request.POST.get('sales_invoice_no')
                context ={
                    'saleform' : form,
                }        
                form.save()
                               
                messages.add_message(request, messages.INFO, form.errors)
                return JsonResponse({'success': True, 'message': 'Record Saved successfully'})
            else:
               
                return JsonResponse({'success': False, 'errors': form.errors})
        else:
            form=frm_salesmaster()
    except Exception as e:
        print(e)  
    return JsonResponse({'success': False, 'message': 'Invalid request'})


@csrf_exempt   
def salesinvoice_addition(request):
    call_command('clearsessions')
    try:
        if request.method=='POST':
           
            form=frm_salesinvoicemaster(request.POST)
           
            if form.is_valid():
                form.save()
                print('Sales Invoice Created Succesfully!!!')
                return redirect(request=request, to="/sales_home")
            else:
               
                messages.add_message(request, messages.INFO, form.errors)
                return redirect(request=request, to="/sales_home")      
        else:
            form=frm_salesinvoicemaster(request.POST)
            
    except Exception as e:
        print(e)        
    return redirect(request=request, to="/sales_home")

@csrf_exempt   
def sales_invoice_delete(request, invid):
    call_command('clearsessions')
    print(invid)
    inv_obj=SalesInvoiceMaster.objects.get(sales_invoice_no=invid) 
    sale_obj=ReturnSalesMaster.objects.filter(return_sales_invoice_no=inv_obj.sales_invoice_no, return_sales_customerid=inv_obj.customerid.customerid).count()
   
    if sale_obj > 0:
        pass
    else:        
        if inv_obj is not None:
            inv_obj.delete()
            print('Invoce Entry Deleted Succesfully!!!')
            return JsonResponse({'success': True, 'message': 'Record deleted successfully'})
        else:
            return JsonResponse({'success': False, 'message': 'Invoice is not Empty or Invoice Number does not exists !!!'})
        


def create_new_sales_invoice_no(request):
    max_billno=""
    billstr=""
    bill_list=[]
    salesinvoicemaster=SalesInvoiceMaster.objects.all().values_list("sales_invoice_no")
   
    if salesinvoicemaster.count() <=0:
        billstr="MPPL-0000000001"
        print(billstr)
    else:
        for i in range(0,len(salesinvoicemaster)):
            bill_list.append(int((salesinvoicemaster[i][0])[5:]))
        max_billno=max(bill_list) + 1   
        ln=len(str(max_billno))
        billstr="MPPL-" + "0" * (10-ln) + str(max_billno)
        print(billstr)
           
    results = [{'billno' : billstr}]  
    return JsonResponse(results, safe=False)



def get_customer_names(request, str_to_match):
    if str_to_match == "*":
        cust_obj=CustomerMaster.objects.all()
    else:
        
        cust_obj=CustomerMaster.objects.filter(customer_name__icontains=str_to_match)
    
    results = [{'customerid': item.customerid, 'customer_name': item.customer_name, 'customer_emailid': item.customer_emailid,'customer_mobile': item.customer_mobile} for item in cust_obj]    
   
    return JsonResponse(results, safe=False)


def customer_select_view(request, customer_to_match):
      cust_obj=CustomerMaster.objects.filter(customerid__icontains=customer_to_match)
      results = [{'customerid': item.customerid, 'customer_name': item.customer_name, 'customer_type': item.customer_type, 'customer_address': item.customer_address, 'customer_mobile': item.customer_mobile, 'customer_whatsapp': item.customer_whatsapp, 'customer_emailid': item.customer_emailid, 'customer_spoc': item.customer_spoc, 'customer_dlno': item.customer_dlno, 'customer_gstno': item.customer_gstno} for item in cust_obj]    
      return JsonResponse(results, safe=False)



def search_sales_invoice_master(request, inv_no, cust_id):
    invoice_master_obj=SalesInvoiceMaster.objects.filter(customerid=cust_id,sales_invoice_no=inv_no)
    results = [{'sales_invoice_no' : item.sales_invoice_no ,'sales_invoice_date': item.sales_invoice_date, 'sales_transport_charges': item.sales_transport_charges,
                'sales_invoice_total': item.sales_invoice_total,'sales_invoice_paid': item.sales_invoice_paid, 'customerid' : item.customerid.customerid,
                'customer_name' : item.customerid.customer_name,'customer_type' : item.customerid.customer_type, 'customer_dlno' : item.customerid.customer_dlno , 'customer_gstno' : item.customerid.customer_gstno,
                'customer_address' : item.customerid.customer_address } for item in invoice_master_obj]    
   
   
    return JsonResponse(results, safe=False)




def search_sales_invoice(request, inv_no, cust_id):
   
    sales_master_obj=SalesMaster.objects.filter(customerid=cust_id, sales_invoice_no=inv_no)
    
    # sales_invoice_paid_obj=SalesInvoicePaid.objects.filter(sales_ip_invoice_no__exact=inv_no.strip()).aggregate(Sum('sales_payment_amount'))
    results = [{'salesid' : item.id, 'productid': item.productid.productid, 'product_name': item.product_name,
                'product_company': item.product_company, 'product_packing': item.product_packing,
                'product_batch_no': item.product_batch_no, 'product_expiry': item.product_expiry,
                'product_MRP': item.product_MRP,'sale_rate': item.sale_rate,
                'sale_quantity': item.sale_quantity,
                'sale_discount': item.sale_discount,
                'customerid': item.customerid.customerid, 'customer_name': item.customerid.customer_name,
                'customer_address': item.customerid.customer_address, 'customer_gstno': item.customerid.customer_gstno, 
                'customer_dlno': item.customerid.customer_dlno, 'sales_invoice_no': item.sales_invoice_no.sales_invoice_no,
                'sale_entry_date': item.sale_entry_date, 'sale_scheme':item.sale_scheme,  
                'sale_igst': item.sale_igst, 'sale_total_amount': item.sale_total_amount } for item in sales_master_obj]    
   
    return JsonResponse(results, safe=False)

def search_sales_invoice_paid(request, inv_no):
   
    sales_invoice_paid_obj=SalesInvoicePaid.objects.filter(sales_ip_invoice_no__exact=inv_no.strip()).aggregate(Sum('sales_payment_amount'))
    results = [sales_invoice_paid_obj]    
   
    return JsonResponse(results, safe=False)

@csrf_exempt   
def fetch_PurchaseMaster(request, prodid, batchno, custtype):
    call_command('clearsessions')
    print(prodid, type(prodid), batchno, type(batchno), custtype, type(custtype) )
    pur_obj=PurchaseMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip())
    pur_qty_obj=PurchaseMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('product_quantity'))
    sale_qty_obj=SalesMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('sale_quantity'))
    ret_pur_qty_obj=ReturnPurchaseMaster.objects.filter(returnproductid=prodid, returnproduct_batch_no__iexact=batchno.strip()).aggregate(Sum('returnproduct_quantity'))
    ret_sales_qty_obj=ReturnSalesMaster.objects.filter(return_sales_productid=prodid, return_sales_product_batch_no__iexact=batchno.strip()).aggregate(Sum('return_sales_sale_quantity'))
    
    if pur_qty_obj["product_quantity__sum"] is None:
        pur_qty_obj["product_quantity__sum"]=0
    if sale_qty_obj["sale_quantity__sum"] is None:
        sale_qty_obj["sale_quantity__sum"]=0
    if ret_pur_qty_obj["returnproduct_quantity__sum"] is None:
        ret_pur_qty_obj["returnproduct_quantity__sum"]=0
    if ret_sales_qty_obj["return_sales_sale_quantity__sum"] is None:
        ret_sales_qty_obj["return_sales_sale_quantity__sum"]=0
    
    avail_qty=float(pur_qty_obj["product_quantity__sum"])-float(sale_qty_obj["sale_quantity__sum"])-float(ret_pur_qty_obj["returnproduct_quantity__sum"])+float(ret_sales_qty_obj["return_sales_sale_quantity__sum"])
    prod_rate_obj=ProductRateMaster.objects.filter(rate_productid=prodid).order_by('-rate_date').values()
    results=[]
    results =[{'product_expiry': item.product_expiry,
                'product_MRP': item.product_MRP,'product_purchase_rate': item.product_purchase_rate,
                'actual_rate_per_qty': item.actual_rate_per_qty,'product_quantity': item.product_quantity,
                'product_scheme':item.product_scheme} for item in pur_obj ]
    temp_dict=results[0]
    temp_dict['product_total_quantity']=pur_qty_obj['product_quantity__sum']
    temp_dict['available_quantity']=avail_qty
    if custtype == "TYPE-A" :
        temp_dict['sale_rate']=prod_rate_obj[0]['rate_A']
        temp_dict['rate_applied']='rate_A'
    elif custtype == "TYPE-B" :
        temp_dict['sale_rate']=prod_rate_obj[0]['rate_B']
        temp_dict['rate_applied']='rate_B'
    else:
        temp_dict['sale_rate']=prod_rate_obj[0]['rate_C']
        temp_dict['rate_applied']='rate_C'
    
    results=[]
    results.append(temp_dict)    
    print(results)    
    # results.append('product_total_quantity' : pur_qty_obj['product_quantity__sum'])
    # print(results)
    return JsonResponse(results, safe=False)

@csrf_exempt   
def get_sale_rates(request, prodid):
    call_command('clearsessions')
    print(prodid, type(prodid))
    prod_rate_obj=ProductRateMaster.objects.filter(rate_productid=prodid).order_by('-rate_date').values()
    print(prod_rate_obj[0]['rate_A'])
    results =[{'rate_A': prod_rate_obj[0]['rate_A'], 'rate_B': prod_rate_obj[0]['rate_B'], 'rate_C': prod_rate_obj[0]['rate_C']}]
    print(results)
    return JsonResponse(results, safe=False)

@csrf_exempt   
def sale_addition(request):
    call_command('clearsessions')
    try:
        if request.method=='POST':
            form=frm_salesmaster(request.POST)
            if form.is_valid():
                context ={
                    'saleform' : form,
                }        
                form.save()
                               
                messages.add_message(request, messages.INFO, form.errors)
                return JsonResponse({'success': True, 'message': 'Record Saved successfully'})
            else:
                print("In Else", form.errors)
                return JsonResponse({'success': False, 'message': form.errors})
        else:
            form=frm_salesmaster()
    except Exception as e:
        print(e)  
    return JsonResponse({'success': False, 'message': 'Invalid request'})


@csrf_exempt   
def get_invoice_paid_info(request, inv_id):
    call_command('clearsessions')
    print(inv_id)
    
    ip_info_obj=InvoicePaid.objects.filter(ip_invoiceid__exact=inv_id).aggregate(Sum('payment_amount'))
    print(ip_info_obj['payment_amount__sum'])
    if ip_info_obj['payment_amount__sum'] is None:
        d={}
        d['payment_amount__sum']=0
        results =[d]
    else:
        results=[ip_info_obj]
    print(results)
    return JsonResponse(results, safe=False)



@csrf_exempt   
def get_sales_invoice_paid_info(request, inv_no):
    call_command('clearsessions')
    print(inv_no)
    
    # sales_invoice_paid_obj=SalesInvoicePaid.objects.filter(sales_ip_invoice_no__exact=inv_no.strip()).aggregate(Sum('sales_payment_amount'))
    sales_ip_info_obj=SalesInvoicePaid.objects.filter(sales_ip_invoice_no__exact=inv_no).aggregate(Sum('sales_payment_amount'))
    print(sales_ip_info_obj['sales_payment_amount__sum'])
    if sales_ip_info_obj['sales_payment_amount__sum'] is None:
        d={}
        d['sales_payment_amount__sum']=0
        results =[d]
    else:
        results=[sales_ip_info_obj]
    print(results)
    return JsonResponse(results, safe=False)


def get_sales_payment_history(request, inv_no):
    print(inv_no)
    sales_invoicepaid_master_obj=SalesInvoicePaid.objects.filter(sales_ip_invoice_no__exact=inv_no)
    results = [{'sales_payment_id': item.sales_payment_id, 'sales_ip_invoice_no': item.sales_ip_invoice_no.sales_invoice_no, 'sales_payment_date': item.sales_payment_date, 
                'sales_payment_amount': item.sales_payment_amount, 'sales_payment_mode': item.sales_payment_mode,
                'sales_payment_ref_no': item.sales_payment_ref_no } for item in sales_invoicepaid_master_obj]    
    print(results)
    return JsonResponse(results, safe=False)



@csrf_exempt 
def get_sale_edit(request, salesid):
    call_command('clearsessions')
    sale_master_obj=SalesMaster.objects.filter(id=salesid)
    
    results = [{'salesid' : item.id, 'productid': item.productid.productid, 'product_name': item.product_name,
                'product_company': item.product_company, 'product_packing': item.product_packing,
                'product_batch_no': item.product_batch_no, 'product_expiry': item.product_expiry,
                'product_MRP': item.product_MRP,'product_hsn': item.productid.product_hsn,
                'product_hsn_percent': item.productid.product_hsn_percent,'sale_rate': item.sale_rate,
                'sale_quantity': item.sale_quantity,
                'sale_discount': item.sale_discount,
                'customerid': item.customerid.customerid, 'customer_name': item.customerid.customer_name, 
                'customer_type': item.customerid.customer_type,
                'customer_address': item.customerid.customer_address, 'customer_gstno': item.customerid.customer_gstno, 
                'customer_dlno': item.customerid.customer_dlno, 'sales_invoice_no': item.sales_invoice_no.sales_invoice_no,
                'sales_invoice_date': item.sales_invoice_no.sales_invoice_date,
                'sale_entry_date': item.sale_entry_date, 'sale_scheme':item.sale_scheme,  
                'sale_igst': item.sale_igst, 'sale_total_amount': item.sale_total_amount, 
                'rate_applied' : item.rate_applied, 'sale_calculation_mode' : item.sale_calculation_mode } for item in sale_master_obj]    
    print(results)
    return JsonResponse(results, safe=False)
  


@csrf_exempt  
def purchase_return_home(request):
  call_command('clearsessions')
  if 'username' not in request.session:
     print('key expired!!!') 
     return redirect('logout/')
  else:
   #   print(request.session['pass_key'])
     returnpurchasedata=ReturnPurchaseMaster.objects.all()
     returninvoicedata=ReturnInvoiceMaster.objects.all()
     returnpurchaseform=frm_returnpurchasemaster()
     returnpurchaseform.method='POST'

     returnpurchaseformedit=frm_returnpurchasemaster_edit()
     returnpurchaseformedit.method='POST'

     returninvoiceform=frm_returninvoicemaster()
     invoicepaidform=frm_pr_purchasereturnrnvoicepaid()
    
     invoiceformedit=frm_returninvoicemaster_edit()

     mypharmadata=Pharmacy_Details.objects.all().first()
  
     uname=request.session['username']
     imgpath=request.session['imgpath']
     fname=request.session['fname']
     lname=request.session['lname']
     utype=request.session['utype']
        
     context = {
        'mypharmadata' : mypharmadata,
        'returninvoicedata' : returninvoicedata,
        'returnpurchasedata' : returnpurchasedata,
        'returnpurchaseform': returnpurchaseform,
        'returninvoiceform' : returninvoiceform,
        'returnpurchaseformedit' : returnpurchaseformedit,
        'invoicepaidform' : invoicepaidform,
        'invoiceformedit' : invoiceformedit,
        'imgpath' : imgpath,
        'fname' : fname,
        'lname' : lname,
        'utype' : utype,
     }
     template = loader.get_template('purchase_return_home.html')
     return HttpResponse(template.render(request=request,context=context))


def create_new_purchasereturn_invoice_no(request):
    max_billno=""
    billstr=""
    bill_list=[]
    salesinvoicemaster=ReturnInvoiceMaster.objects.all().values_list("returninvoiceid")
   
    if salesinvoicemaster.count() <=0:
        billstr="MPPR-0000000001"
        print(billstr)
    else:
        for i in range(0,len(salesinvoicemaster)):
            bill_list.append(int((salesinvoicemaster[i][0])[5:]))
        max_billno=max(bill_list) + 1   
        ln=len(str(max_billno))
        billstr="MPPR-" + "0" * (10-ln) + str(max_billno)
        print(billstr)
           
    results = [{'billno' : billstr}]  
    return JsonResponse(results, safe=False)


@csrf_exempt   
def returninvoice_addition(request):
    call_command('clearsessions')
    try:
        if request.method=='POST':
            form=frm_returninvoicemaster(request.POST)
          
            if form.is_valid():
                form.save()
                print('Invoice Created Succesfully!!!')
                return redirect(request=request, to="/purchase_return_home")
            else:
                messages.add_message(request, messages.INFO, form.errors)
                return redirect(request=request, to="/purchase_return_home")      
        else:
            form=frm_returninvoicemaster(request.POST)
            
    except Exception as e:
        print(e)        
    return redirect(request=request, to="/purchase_return_home")


def return_search_invoice_master(request, inv_id, suppl_id):
    invoice_master_obj=ReturnInvoiceMaster.objects.filter(returnsupplierid=suppl_id,returninvoiceid=inv_id)
    results = [{'returninvoiceid': item.returninvoiceid, 
                'returninvoice_date': item.returninvoice_date, 
                'returnsupplierid' : item.returnsupplierid.supplierid,
                'return_charges': item.return_charges,
                'returninvoice_total': item.returninvoice_total,
                'returninvoice_paid': item.returninvoice_paid, 
                'returnsupplier_name' : item.returnsupplierid.supplier_name, 
                'returnsupplier_dlno' : item.returnsupplierid.supplier_dlno , 
                'returnsupplier_gstno' : item.returnsupplierid.supplier_gstno,
                'returnsupplier_address' : item.returnsupplierid.supplier_address } for item in invoice_master_obj]    
   
    return JsonResponse(results, safe=False)

def return_search_invoice(request, inv_id, suppl_id):
    return_purchase_master_obj=ReturnPurchaseMaster.objects.filter(returnproduct_supplierid=suppl_id,returninvoiceid=inv_id)
    results = [{'returnpurchaseid' : item.returnpurchaseid, 'returnproductid': item.returnproductid.productid, 'returnproduct_name': item.returnproductid.product_name,
                'returnproduct_company': item.returnproductid.product_company, 'returnproduct_packing': item.returnproductid.product_packing,
                'returnproduct_batch_no': item.returnproduct_batch_no, 'returnproduct_expiry': item.returnproduct_expiry,
                'returnproduct_MRP' : item.returnproduct_MRP,
                'returnproduct_purchase_rate': item.returnproduct_purchase_rate,
                'returnproduct_quantity': item.returnproduct_quantity,
                'returnproduct_charges': item.returnproduct_charges,
                'returnproduct_supplierid': item.returnproduct_supplierid.supplierid, 'returnsupplier_name': item.returnproduct_supplierid.supplier_name,
                'returnsupplier_address': item.returnproduct_supplierid.supplier_address, 'returnsupplier_gstno': item.returnproduct_supplierid.supplier_gstno, 
                'returnsupplier_dlno': item.returnproduct_supplierid.supplier_dlno, 'returninvoiceid': item.returninvoiceid.returninvoiceid,
                'returnpurchase_entry_date': item.returnpurchase_entry_date, 'returnproduct_scheme':item.returnproduct_scheme,  
                'returntotal_amount': item.returntotal_amount } for item in return_purchase_master_obj]    
  
    return JsonResponse(results, safe=False)


@csrf_exempt   
def purchase_return_invoice_delete(request, invid):
    call_command('clearsessions')
    print(invid)
    inv_obj=ReturnInvoiceMaster.objects.get(returninvoiceid=invid) 
    rp_obj=ReturnPurchaseMaster.objects.filter(returninvoiceid=inv_obj.returninvoiceid, returnproduct_supplierid=inv_obj.returnsupplierid.supplierid).count()
   
    if rp_obj > 0:
        pass
    else:        
        if inv_obj is not None:
            inv_obj.delete()
            print('Purchase Return Invoce Entry Deleted Succesfully!!!')
            return JsonResponse({'success': True, 'message': 'Record deleted successfully'})
        else:
            return JsonResponse({'success': False, 'message': 'Purchase Return Invoice is not Empty or Invoice Number does not exists !!!'})

@csrf_exempt   
def fetch_PurchaseMaster_for_PurchaseReturn(request, prodid, batchno):
    call_command('clearsessions')
    print(prodid, type(prodid), batchno, type(batchno))
    pur_obj=PurchaseMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip())
    pur_qty_obj=PurchaseMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('product_quantity'))
    sale_qty_obj=SalesMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('sale_quantity'))
    ret_pur_qty_obj=ReturnPurchaseMaster.objects.filter(returnproductid=prodid, returnproduct_batch_no__iexact=batchno.strip()).aggregate(Sum('returnproduct_quantity'))
    ret_sales_qty_obj=ReturnSalesMaster.objects.filter(return_sales_productid=prodid, return_sales_product_batch_no__iexact=batchno.strip()).aggregate(Sum('return_sales_sale_quantity'))

    # print(ret_sales_qty_obj["return_sales_sale_quantity__sum"])
    # print(pur_qty_obj["product_quantity__sum"])
    # print(sale_qty_obj["sale_quantity__sum"])
    # print(ret_pur_qty_obj["returnproduct_quantity__sum"])
    
    if pur_qty_obj["product_quantity__sum"] is None:
        pur_qty_obj["product_quantity__sum"]=0
    if sale_qty_obj["sale_quantity__sum"] is None:
        sale_qty_obj["sale_quantity__sum"]=0
    if ret_pur_qty_obj["returnproduct_quantity__sum"] is None:
        ret_pur_qty_obj["returnproduct_quantity__sum"]=0
    if ret_sales_qty_obj["return_sales_sale_quantity__sum"] is None:
        ret_sales_qty_obj["return_sales_sale_quantity__sum"]=0
   
    avail_qty=float(pur_qty_obj["product_quantity__sum"])-float(sale_qty_obj["sale_quantity__sum"])-float(ret_pur_qty_obj["returnproduct_quantity__sum"])+float(ret_sales_qty_obj["return_sales_sale_quantity__sum"])
    
    results=[]
    results =[{'product_expiry': item.product_expiry,
                'product_MRP': item.product_MRP,'product_purchase_rate': item.product_purchase_rate,
                'actual_rate_per_qty': item.actual_rate_per_qty,'product_quantity': item.product_quantity,
                'product_scheme':item.product_scheme} for item in pur_obj ]
    temp_dict=results[0]
    temp_dict['product_total_quantity']=pur_qty_obj['product_quantity__sum']
    temp_dict['available_quantity']=avail_qty
       
    results.append(temp_dict)    
    print(results)    
    return JsonResponse(results, safe=False)


@csrf_exempt   
def return_purchase_addition(request):
    call_command('clearsessions')
    try:
        if request.method=='POST':
            # purcshase=ReturnPurchaseMaster.objects.get(product_batch_no__iexact=batchno)
            batchno=request.POST["returnproduct_batch_no"]
            prodid=request.POST["returnproductid"]
            print(prodid, batchno)
            
            new_purchase_qty=float(request.POST['returnproduct_quantity'])
            pur_qty_obj=PurchaseMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('product_quantity'))
            sale_qty_obj=SalesMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('sale_quantity'))
            ret_pur_qty_obj=ReturnPurchaseMaster.objects.filter(returnproductid=prodid, returnproduct_batch_no__iexact=batchno.strip()).aggregate(Sum('returnproduct_quantity'))
            ret_sale_qty_obj=ReturnSalesMaster.objects.filter(return_sales_productid=prodid, return_sales_product_batch_no__iexact=batchno.strip()).aggregate(Sum('return_sales_sale_quantity'))
           
            if pur_qty_obj["product_quantity__sum"] is None:
                pur_qty_obj["product_quantity__sum"]=0
            if sale_qty_obj["sale_quantity__sum"] is None:
                sale_qty_obj["sale_quantity__sum"]=0
            if ret_pur_qty_obj["returnproduct_quantity__sum"] is None:
                ret_pur_qty_obj["returnproduct_quantity__sum"]=0
            if ret_sale_qty_obj["return_sales_sale_quantity__sum"] is None:
                ret_sale_qty_obj["return_sales_sale_quantity__sum"]=0
            insert_qualification=(float(pur_qty_obj["product_quantity__sum"])+float(ret_sale_qty_obj["return_sales_sale_quantity__sum"]))-float(sale_qty_obj["sale_quantity__sum"])-float(ret_pur_qty_obj["returnproduct_quantity__sum"])-float(new_purchase_qty)
            
            print(float(pur_qty_obj["product_quantity__sum"]), float(ret_sale_qty_obj["return_sales_sale_quantity__sum"]), float(sale_qty_obj["sale_quantity__sum"]), float(ret_pur_qty_obj["returnproduct_quantity__sum"]), float(new_purchase_qty))
            print(insert_qualification)
            if insert_qualification >= 0:
                form=frm_returnpurchasemaster(request.POST)
                if form.is_valid():
                    form.save()
                    return JsonResponse({'success': True, 'message': 'Record Saved successfully'})
                else:
                    print("Form is Invalid !!", form.errors)
                    return JsonResponse({'success': False, 'message': form.errors})
            else:
                print("This updation will cause inconsistency in data!!!")
                return JsonResponse({'success': False, 'message': 'Invalid requestThis updation will cause inconsistency in data!!!'})
                # form=frm_returnpurchasemaster()
    except Exception as e:
        print(e)  
    return JsonResponse({'success': False, 'message': 'Invalid request'})

csrf_exempt   
def sale_update(request, saleid):
    call_command('clearsessions')
    obj = get_object_or_404(SalesMaster, id=saleid)
    if request.method=='POST':
        form=frm_saleseditmaster(request.POST,instance=obj)
        print(form.data)
        if form.is_valid():
            form.save()
            print('Sale Information Updated!!!')
            return JsonResponse({'success': True, 'message': 'Form Updated successfully !!'})
        else:
            print(form.errors)
            return JsonResponse({'success': False, 'message': 'Form data is invalid !!'})

    else:
        return JsonResponse({'success': False, 'message': 'Form data is invalid !!'})
    


@csrf_exempt 
def get_purchase_edit(request, purid):
    call_command('clearsessions')
    pur_master_obj=PurchaseMaster.objects.filter(purchaseid=purid)
    
    results = [{'purchaseid' : item.purchaseid, 'productid': item.productid.productid, 'product_name': item.product_name,
                'product_company': item.product_company, 'product_packing': item.product_packing,
                'product_batch_no': item.product_batch_no, 'product_expiry': item.product_expiry,
                'product_MRP': item.product_MRP,'product_hsn': item.productid.product_hsn,
                'product_hsn_percent': item.productid.product_hsn_percent,'product_purchase_rate': item.product_purchase_rate,
                'product_quantity': item.product_quantity,
                'actual_rate_per_qty' : item.actual_rate_per_qty,
                'product_actual_rate' : item.product_actual_rate,
                'product_discount_got': item.product_discount_got,
                'product_transportation_charges' : item.product_transportation_charges,
                'product_supplierid': item.product_supplierid.supplierid, 'supplier_name': item.product_supplierid.supplier_name, 
                'supplier_type': item.product_supplierid.supplier_type,
                'supplier_address': item.product_supplierid.supplier_address, 'supplier_gstno': item.product_supplierid.supplier_gstno, 
                'supplier_dlno': item.product_supplierid.supplier_dlno, 'product_invoice_no': item.product_invoice_no,
                'product_invoice_date': item.product_invoiceid.invoice_date,
                'purchase_entry_date': item.purchase_entry_date, 'product_scheme':item.product_scheme,  
                'IGST': item.IGST, 'total_amount': item.total_amount, 'purchase_calculation_mode' : item.purchase_calculation_mode} for item in pur_master_obj]    
    print(results)
    return JsonResponse(results, safe=False)


@csrf_exempt   
def get_AvailableQuantity(request, prodid, batchno, saleid):
    call_command('clearsessions')
    print(prodid, type(prodid), batchno, type(batchno))
    pur_obj=PurchaseMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip())
    pur_qty_obj=PurchaseMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('product_quantity'))
    sale_qty_obj=SalesMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('sale_quantity'))
    ret_pur_qty_obj=ReturnPurchaseMaster.objects.filter(returnproductid=prodid, returnproduct_batch_no__iexact=batchno.strip()).aggregate(Sum('returnproduct_quantity'))
    sale_return_qty_obj=ReturnSalesMaster.objects.filter(return_sales_productid=prodid, return_sales_product_batch_no__iexact=batchno.strip()).exclude(return_sales_invoiceid=saleid).aggregate(Sum('return_sales_sale_quantity'))
    
    if pur_qty_obj["product_quantity__sum"] is None:
        pur_qty_obj["product_quantity__sum"]=0
    if sale_qty_obj["sale_quantity__sum"] is None:
        sale_qty_obj["sale_quantity__sum"]=0
    if ret_pur_qty_obj["returnproduct_quantity__sum"] is None:
        ret_pur_qty_obj["returnproduct_quantity__sum"]=0
    if sale_return_qty_obj["return_sales_sale_quantity__sum"] is None:
        sale_return_qty_obj["return_sales_sale_quantity__sum"]=0

    avail_qty=float(sale_qty_obj["sale_quantity__sum"])-float(sale_return_qty_obj["return_sales_sale_quantity__sum"])
   
    results=[]
    results =[{ 'product_MRP': item.product_MRP,'product_purchase_rate': item.product_purchase_rate,
                'actual_rate_per_qty': item.actual_rate_per_qty} for item in pur_obj ]
    temp_dict=results[0]
    # temp_dict['product_total_quantity']=pur_qty_obj['product_quantity__sum']
    temp_dict['available_quantity']=avail_qty
   
    
    results=[]
    results.append(temp_dict)    
    print(results)    
    # results.append('product_total_quantity' : pur_qty_obj['product_quantity__sum'])
    # print(results)
    return JsonResponse(results, safe=False)



def purchase_returns_invoice_master_edit(request, inv_id):
    
    return_invoice_master_obj=ReturnInvoiceMaster.objects.filter(returninvoiceid=inv_id)
    results = [{'invoiceid': item.returninvoiceid, 'invoice_date': item.returninvoice_date, 'transport_charges': item.return_charges,
                'invoice_total': item.returninvoice_total,'invoice_paid': item.returninvoice_paid, 'supplierid' : item.returnsupplierid.supplierid,
                'supplier_name' : item.returnsupplierid.supplier_name, 'supplier_dlno' : item.returnsupplierid.supplier_dlno , 'supplier_gstno' : item.returnsupplierid.supplier_gstno,
                'supplier_address' : item.returnsupplierid.supplier_address } for item in return_invoice_master_obj]    
    print(results)
    return JsonResponse(results, safe=False)



@csrf_exempt   
def purchase_return_invoice_master_update(request, inv_id):
    call_command('clearsessions')
    if request.method=='POST':
        invoice=ReturnInvoiceMaster.objects.get(returninvoiceid=inv_id)
        invoice.returninvoice_date=request.POST['returninvoice_date']
        invoice.returnsupplierid=SupplierMaster.objects.get(supplierid=request.POST['returnsupplierid'])
        invoice.return_charges=request.POST['return_charges']
        invoice.returninvoice_total=request.POST['returninvoice_total']
        invoice.returninvoice_paid=request.POST['returninvoice_paid']
        invoice.save()
        print('Invoice Information Updated!!!')
        return redirect(request=request, to='/purchase_return_home')
    else:
        return redirect(request=request, to='/purchase_return_home')
    

csrf_exempt   
def purchase_return_delete(request, purid):
    call_command('clearsessions')
    print("Delete called!!")
    pur_obj=ReturnPurchaseMaster.objects.get(returnpurchaseid=purid) 
    prodid=pur_obj.returnproductid.productid
    batchno=pur_obj.returnproduct_batch_no
    print(prodid, batchno)
    pur_qty_obj=PurchaseMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('product_quantity'))
    sale_qty_obj=SalesMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('sale_quantity'))
    ret_pur_qty_obj=ReturnPurchaseMaster.objects.filter(returnproductid=prodid, returnproduct_batch_no__iexact=batchno.strip()).exclude(returnpurchaseid=purid).aggregate(Sum('returnproduct_quantity'))
    ret_sale_qty_obj=ReturnSalesMaster.objects.filter(return_sales_productid=prodid, return_sales_product_batch_no__iexact=batchno.strip()).aggregate(Sum('return_sales_sale_quantity'))
    print(ret_sale_qty_obj)
    if pur_qty_obj["product_quantity__sum"] is None:
        pur_qty_obj["product_quantity__sum"]=0
    if sale_qty_obj["sale_quantity__sum"] is None:
        sale_qty_obj["sale_quantity__sum"]=0
    if ret_pur_qty_obj["returnproduct_quantity__sum"] is None:
        ret_pur_qty_obj["returnproduct_quantity__sum"]=0
    if ret_sale_qty_obj["return_sales_sale_quantity__sum"] is None:
        ret_sale_qty_obj["return_sales_sale_quantity__sum"]=0
    delete_qualification=(float(pur_qty_obj["product_quantity__sum"])+float(ret_sale_qty_obj["return_sales_sale_quantity__sum"]))-float(sale_qty_obj["sale_quantity__sum"])-float(ret_pur_qty_obj["returnproduct_quantity__sum"])
    print(delete_qualification)
    if delete_qualification>=0:
        if pur_obj is not None:
            pur_obj.delete()
            print('Purchase Return Entry Deleted Succesfully!!!')
            return JsonResponse({'success': True, 'message': 'Record deleted successfully'})
        else:
            print("Purchase Entry with such details, does not exist !!!")
            return JsonResponse({'success': False, 'message': 'Purchase Return Entry with such details, does not exist !!!'})
    else:
        return JsonResponse({'success': False, 'message': 'This deletion will cause inconsistency in overall data!!!'})
    


@csrf_exempt 
def get_purchase_return_edit(request, purid):
    call_command('clearsessions')
    pur_master_obj=ReturnPurchaseMaster.objects.filter(returnpurchaseid=purid)

    pur_obj=ReturnPurchaseMaster.objects.get(returnpurchaseid=purid) 
    prodid=pur_obj.returnproductid.productid
    batchno=pur_obj.returnproduct_batch_no
    print(prodid, batchno)
    pur_qty_obj=PurchaseMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('product_quantity'))
    sale_qty_obj=SalesMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('sale_quantity'))
    ret_pur_qty_obj=ReturnPurchaseMaster.objects.filter(returnproductid=prodid, returnproduct_batch_no__iexact=batchno.strip()).exclude(returnpurchaseid=purid).aggregate(Sum('returnproduct_quantity'))
    ret_sale_qty_obj=ReturnSalesMaster.objects.filter(return_sales_productid=prodid, return_sales_product_batch_no__iexact=batchno.strip()).aggregate(Sum('return_sales_sale_quantity'))
    if pur_qty_obj["product_quantity__sum"] is None:
        pur_qty_obj["product_quantity__sum"]=0
    if sale_qty_obj["sale_quantity__sum"] is None:
        sale_qty_obj["sale_quantity__sum"]=0
    if ret_pur_qty_obj["returnproduct_quantity__sum"] is None:
        ret_pur_qty_obj["returnproduct_quantity__sum"]=0
    if ret_sale_qty_obj["return_sales_sale_quantity__sum"] is None:
        ret_sale_qty_obj["return_sales_sale_quantity__sum"]=0
    delete_qualification=(float(pur_qty_obj["product_quantity__sum"])+float(ret_sale_qty_obj["return_sales_sale_quantity__sum"]))-float(sale_qty_obj["sale_quantity__sum"])-float(ret_pur_qty_obj["returnproduct_quantity__sum"])
    results = [{'purchaseid' : item.returnpurchaseid, 'productid': item.returnproductid.productid, 'product_name': item.returnproductid.product_name,
                'product_company': item.returnproductid.product_company, 'product_packing': item.returnproductid.product_packing,
                'product_batch_no': item.returnproduct_batch_no, 'product_expiry': item.returnproduct_expiry,
                'product_MRP': item.returnproduct_MRP,'product_hsn': item.returnproductid.product_hsn,
                'product_hsn_percent': item.returnproductid.product_hsn_percent,'product_purchase_rate': item.returnproduct_purchase_rate,
                'product_quantity': item.returnproduct_quantity,
                'available_quantity' : delete_qualification,
                # 'actual_rate_per_qty' : item.returnactual_rate_per_qty,
                'product_actual_rate' : item.returnproduct_purchase_rate,
                # 'product_discount_got': item.product_discount_got,
                'returnproduct_charges' : item.returnproduct_charges,
                'product_supplierid': item.returnproduct_supplierid.supplierid, 'supplier_name': item.returnproduct_supplierid.supplier_name, 
                'supplier_type': item.returnproduct_supplierid.supplier_type,
                'supplier_address': item.returnproduct_supplierid.supplier_address, 'supplier_gstno': item.returnproduct_supplierid.supplier_gstno, 
                'supplier_dlno': item.returnproduct_supplierid.supplier_dlno, 'product_invoice_no': item.returninvoiceid.returninvoiceid,
                'product_invoice_date': item.returninvoiceid.returninvoice_date,
                'purchase_entry_date': item.returnpurchase_entry_date, 'product_scheme':item.returnproduct_scheme,  
                'total_amount': item.returntotal_amount} for item in pur_master_obj]    
    
    return JsonResponse(results, safe=False)


@csrf_exempt   
def purchase_return_update(request, purid):
    call_command('clearsessions')
    if request.method=='POST':   
        purcshase=ReturnPurchaseMaster.objects.get(returnpurchaseid=purid)
        prodid=purcshase.returnproductid.productid
        batchno=purcshase.returnproduct_batch_no
        new_purchase_qty=float(request.POST['returnproduct_quantity'])
        pur_qty_obj=PurchaseMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('product_quantity'))
        sale_qty_obj=SalesMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('sale_quantity'))
        ret_pur_qty_obj=ReturnPurchaseMaster.objects.filter(returnproductid=prodid, returnproduct_batch_no__iexact=batchno.strip()).exclude(returnpurchaseid=purid).aggregate(Sum('returnproduct_quantity'))
        ret_sale_qty_obj=ReturnSalesMaster.objects.filter(return_sales_productid=prodid, return_sales_product_batch_no__iexact=batchno.strip()).aggregate(Sum('return_sales_sale_quantity'))
        # print(new_purchase_qty, float(ret_pur_qty_obj["returnproduct_quantity__sum"]))
        if pur_qty_obj["product_quantity__sum"] is None:
            pur_qty_obj["product_quantity__sum"]=0
        if sale_qty_obj["sale_quantity__sum"] is None:
            sale_qty_obj["sale_quantity__sum"]=0
        if ret_pur_qty_obj["returnproduct_quantity__sum"] is None:
            ret_pur_qty_obj["returnproduct_quantity__sum"]=0
        if ret_sale_qty_obj["return_sales_sale_quantity__sum"] is None:
            ret_sale_qty_obj["return_sales_sale_quantity__sum"]=0
        edit_qualification=(float(pur_qty_obj["product_quantity__sum"])+float(ret_sale_qty_obj["return_sales_sale_quantity__sum"]))-float(sale_qty_obj["sale_quantity__sum"])-float(ret_pur_qty_obj["returnproduct_quantity__sum"])-float(new_purchase_qty)
        print(float(pur_qty_obj["product_quantity__sum"]), float(ret_sale_qty_obj["return_sales_sale_quantity__sum"]), float(sale_qty_obj["sale_quantity__sum"]), float(ret_pur_qty_obj["returnproduct_quantity__sum"]), float(new_purchase_qty))
        # print(edit_qualification)
        if edit_qualification>=0:
            obj = get_object_or_404(ReturnPurchaseMaster, returnpurchaseid=purid)
            form=frm_returnpurchasemaster_edit(request.POST,instance=obj)
           
            if form.is_valid():
                form.save()
                print('Purchase Return Record Updated successfully.!!!')
                return JsonResponse({'success': True, 'message': 'Purchase Return Record Updated successfully !'})
            else:
                print('Purchase Return Information Invalid', form.errors)
                return JsonResponse({'success': False, 'message': form.errors })

        else:
           print("This updation will cause inconsistency in data!!!")
           return JsonResponse({'success': False, 'message': 'This updation will cause inconsistency in data!!!'})


@csrf_exempt   
def get_purchasereturninvoice_paid_info(request, inv_id):
    call_command('clearsessions')
    ip_info_obj=PurchaseReturnInvoicePaid.objects.filter(pr_ip_returninvoiceid__exact=inv_id).aggregate(Sum('pr_payment_amount'))
    print(ip_info_obj['pr_payment_amount__sum'])
    if ip_info_obj['pr_payment_amount__sum'] is None:
        d={}
        d['pr_payment_amount__sum']=0
        results =[d]
    else:
        results=[ip_info_obj]
    print(results)
    return JsonResponse(results, safe=False)



@csrf_exempt   
def purchase_return_invoicepaid_addition(request):
    call_command('clearsessions')
    try:
        if request.method=='POST':
            form=frm_pr_purchasereturnrnvoicepaid(request.POST)
           
            if form.is_valid():
                form.save()
                print('Payment against purchase return invoice paid added!!!')
                # messages.add_message(request, messages.INFO, form.errors)
                return JsonResponse({'success': True, 'message': 'Record Saved successfully'})
            else:
                print(form.errors)
                return JsonResponse({'success': False, 'message': form.errors})
    except Exception as e:
        print(e)  
    return JsonResponse({'success': False, 'message': 'Invalid request'})



def get_purchase_return_payment_history(request, invoice_id):
    invoicepaid_master_obj=PurchaseReturnInvoicePaid.objects.filter(pr_ip_returninvoiceid=invoice_id)
    results = [{'payment_id': item.pr_payment_id, 'returninvoiceid': item.pr_ip_returninvoiceid.returninvoiceid, 'payment_date': item.pr_payment_date, 
                'payment_amount': item.pr_payment_amount, 'payment_mode': item.pr_payment_mode,
                'payment_ref_no': item.pr_payment_ref_no } for item in invoicepaid_master_obj]    
    return JsonResponse(results, safe=False)


@csrf_exempt   
def pr_payment_history_delete(request, payid):
    call_command('clearsessions')   
    pay_obj=PurchaseReturnInvoicePaid.objects.get(pr_payment_id=payid) 
    if pay_obj is not None:
        pay_obj.delete()
        print('Payment Entry Deleted Succesfully!!!')
        return JsonResponse({'success': True, 'message': 'Record deleted successfully!!'})
    else:
        print("Payment Entry with such details, does not exist !!!")
        return JsonResponse({'success': False, 'message': 'Record does not exists!!'}, status=400)




# Sales Return Starts here!!!
@csrf_exempt  
def sales_return_home(request):
  call_command('clearsessions')
  if 'username' not in request.session:
     print('key expired!!!') 
     return redirect('logout/')
  else:
   #   print(request.session['pass_key'])
     salesdata=ReturnSalesMaster.objects.all()
     invoicedata=ReturnSalesInvoiceMaster.objects.all()
     
     salesform=frm_salereturnsmaster()
     salesform.method='POST'

     
     salesinvoiceform=frm_salesreturninvoicemaster()
     salesinvoicepaidform=frm_salesreturninvoicepaid()

     editsalesform=frm_salereturnsmaster_edit()
     editsalesform.method='POST'
       
     invoiceformedit=frm_salesreturninvoicemaster_edit()

     mypharmadata=Pharmacy_Details.objects.all().first()
  
     uname=request.session['username']
     imgpath=request.session['imgpath']
     fname=request.session['fname']
     lname=request.session['lname']
     utype=request.session['utype']
        
     context = {
        'mypharmadata' : mypharmadata,
        'invoicedata' : invoicedata,
        'salesdata' : salesdata,
        'saleform': salesform,
        'editsaleform' : editsalesform,
        'salesinvoiceform' : salesinvoiceform,
        'salesinvoicepaidform' : salesinvoicepaidform,
        'invoiceformedit' : invoiceformedit,
        'imgpath' : imgpath,
        'fname' : fname,
        'lname' : lname,
        'utype' : utype,
     }
     template = loader.get_template('sales_return_home.html')
     return HttpResponse(template.render(request=request,context=context))


def create_new_sales_return_invoice_no(request):
    max_billno=""
    billstr=""
    bill_list=[]
    salesinvoicemaster=ReturnSalesInvoiceMaster.objects.all().values_list("return_sales_invoice_no")
   
    if salesinvoicemaster.count() <=0:
        billstr="MPSR-0000000001"
        print(billstr)
    else:
        for i in range(0,len(salesinvoicemaster)):
            bill_list.append(int((salesinvoicemaster[i][0])[5:]))
        max_billno=max(bill_list) + 1   
        ln=len(str(max_billno))
        billstr="MPSR-" + "0" * (10-ln) + str(max_billno)
        print(billstr)
           
    results = [{'billno' : billstr}]  
    return JsonResponse(results, safe=False)


@csrf_exempt   
def salesreturninvoice_addition(request):
    call_command('clearsessions')
    try:
        if request.method=='POST':
           
            form=frm_salesreturninvoicemaster(request.POST)
           
            if form.is_valid():
                form.save()
                print('Sales Invoice Created Succesfully!!!')
                return redirect(request=request, to="/sales_return_home")
            else:
               
                messages.add_message(request, messages.INFO, form.errors)
                return redirect(request=request, to="/sales_return_home")      
        else:
            form=frm_salesreturninvoicemaster(request.POST)
            
    except Exception as e:
        print(e)        
    return redirect(request=request, to="/sales_return_home")


def sales_return_invoice_master_edit(request, inv_id):
    invoice_master_obj=ReturnSalesInvoiceMaster.objects.filter(return_sales_invoice_no=inv_id)
    results = [{'invoice_no' : item.return_sales_invoice_no ,'invoice_date': item.return_sales_invoice_date, 'transport_charges': item.return_sales_charges,
                'invoice_total': item.return_sales_invoice_total,'invoice_paid': item.return_sales_invoice_paid, 'customerid' : item.return_sales_customerid.customerid,
                'customer_name' : item.return_sales_customerid.customer_name, 'customer_dlno' : item.return_sales_customerid.customer_dlno, 'customer_gstno' : item.return_sales_customerid.customer_gstno,
                'customer_address' : item.return_sales_customerid.customer_address } for item in invoice_master_obj]    
    print(results)
    return JsonResponse(results, safe=False)


@csrf_exempt   
def sales_return_invoice_master_update(request, inv_id):
    call_command('clearsessions')
    obj = get_object_or_404(ReturnSalesInvoiceMaster, return_sales_invoice_no=inv_id)
    if request.method=='POST':
        form=frm_salesreturninvoicemaster_edit(request.POST,instance=obj)
        if form.is_valid():
            form.save()
            print('Invoice Information Updated!!!')
            return redirect(request=request, to='/sales_return_home')
        else:
            print('Invoice Information Invalid!!')
            return redirect(request=request, to='/sales_return_home')

        # invoice=InvoiceMaster.objects.get(invoiceid=inv_id)
        # invoice.invoice_no=request.POST['invoice_no']
        # invoice.invoice_date=request.POST['invoice_date']
        # invoice.supplierid=SupplierMaster.objects.get(supplierid=request.POST['supplierid'])
        # invoice.transport_charges=request.POST['transport_charges']
        # invoice.invoice_total=request.POST['invoice_total']
        # invoice.invoice_paid=request.POST['invoice_paid']
       
    else:
        form=frm_salesreturninvoicemaster_edit()
        return redirect(request=request, to='/sales_return_home')


@csrf_exempt   
def sales_return_invoice_delete(request, invid):
    call_command('clearsessions')
    print(invid)
    inv_obj=ReturnSalesInvoiceMaster.objects.get(return_sales_invoice_no=invid) 
    sale_obj=ReturnSalesMaster.objects.filter(return_sales_invoice_no=inv_obj.return_sales_invoice_no, return_sales_customerid=inv_obj.return_sales_customerid.customerid).count()
   
    if sale_obj > 0:
        pass
    else:        
        if inv_obj is not None:
            inv_obj.delete()
            print('Invoce Entry Deleted Succesfully!!!')
            return JsonResponse({'success': True, 'message': 'Record deleted successfully'})
        else:
            return JsonResponse({'success': False, 'message': 'Invoice is not Empty or Invoice Number does not exists !!!'})


def search_sales_return_invoice_master(request, inv_no, cust_id):
    invoice_master_obj=ReturnSalesInvoiceMaster.objects.filter(return_sales_customerid=cust_id,return_sales_invoice_no=inv_no)
    results=[]
    results = [{'sales_invoice_no' : item.return_sales_invoice_no ,'sales_invoice_date': item.return_sales_invoice_date, 'sales_transport_charges': item.return_sales_charges,
                'sales_invoice_total': item.return_sales_invoice_total,'sales_invoice_paid': item.return_sales_invoice_paid, 'customerid' : item.return_sales_customerid.customerid,
                'customer_name' : item.return_sales_customerid.customer_name,'customer_type' : item.return_sales_customerid.customer_type, 
                'customer_dlno' : item.return_sales_customerid.customer_dlno , 'customer_gstno' : item.return_sales_customerid.customer_gstno,
                'customer_address' : item.return_sales_customerid.customer_address } for item in invoice_master_obj]    
    return JsonResponse(results, safe=False)


def search_sales_return_invoice(request, inv_no, cust_id):
    sales_master_obj=ReturnSalesMaster.objects.filter(return_sales_customerid=cust_id, return_sales_invoice_no_id=inv_no)
    results = [{'salesid' : item.return_sales_invoiceid, 'productid': item.return_sales_productid.productid, 'product_name': item.return_sales_productid.product_name,
                'product_company': item.return_sales_productid.product_company, 'product_packing': item.return_sales_productid.product_packing,
                'product_batch_no': item.return_sales_product_batch_no, 'product_expiry': item.return_sales_product_expiry,
                'product_MRP': item.return_sales_product_MRP,'sale_rate': item.return_sales_sale_rate,
                'sale_quantity': item.return_sales_sale_quantity,
                'customerid': item.return_sales_customerid.customerid, 'customer_name': item.return_sales_customerid.customer_name,
                'customer_address': item.return_sales_customerid.customer_address, 'customer_gstno': item.return_sales_customerid.customer_gstno, 
                'customer_dlno': item.return_sales_customerid.customer_dlno, 'sales_invoice_no': item.return_sales_invoice_no.return_sales_invoice_no,
                'sale_entry_date': item.return_sales_sale_entry_date, 'sale_scheme':item.return_sales_sale_scheme,  
                'sale_total_amount': item.return_sales_total_amount, 'sale_igst' : item.return_sales_sale_igst} for item in sales_master_obj]    
    
    return JsonResponse(results, safe=False)


@csrf_exempt   
def sale_return_addition(request):
    call_command('clearsessions')
    try:
        if request.method=='POST':
            form=frm_salereturnsmaster(request.POST)
            if form.is_valid():
                context ={
                    'saleform' : form,
                }        
                form.save()
                               
                messages.add_message(request, messages.INFO, form.errors)
                return JsonResponse({'success': True, 'message': 'Record Saved successfully'})
            else:
                print("In Else", form.errors)
                return JsonResponse({'success': False, 'message': form.errors})
        else:
            form=frm_salesmaster()
    except Exception as e:
        print(e)  
    return JsonResponse({'success': False, 'message': 'Invalid request'})



@csrf_exempt   
def get_invoice_entries(request, invno):
    call_command('clearsessions')
    print(invno)
    sale_master_obj=SalesMaster.objects.filter(sales_invoice_no=invno)
    # sale_return_obj=ReturnSalesMaster.objects.filter(sales_invoice_no=invno)
    # sale_qty_obj=SalesMaster.objects.filter(productid=prodid, product_batch_no__iexact=batchno.strip()).aggregate(Sum('sale_quantity'))
    # sold_qty_obj=SalesMaster.objects.filter(sales_invoice_no=invno).aggregate(Sum('sale_quantity'))
    # sale_qty_obj=SalesMaster.objects.filter(sales_invoice_no=invno, productid=prod_id).values('productid', 'product_batch_no').annotate(sale_quantity=Sum('sale_quantity'))

    if sale_master_obj is None:
        print("Record does not exists!!")
        results=[]
    else:
         results=[]
         results =[{'sale_id' : item.id, 'productid' : item.productid.productid, 'product_name' : item.product_name, 
                'product_batch_no' : item.product_batch_no,
                'product_company' : item.product_company, 'product_packing' : item.product_packing, 
                'product_expiry': item.product_expiry, 'sale_igst' : item.sale_igst,
                'product_MRP': item.product_MRP,'sale_rate': item.sale_rate,
                'sale_quantity': item.sale_quantity,
                'sale_scheme':item.sale_scheme} for item in sale_master_obj ]

    print("Reskts are!! ", results)
    return JsonResponse(results, safe=False)


@csrf_exempt 
def get_sale_quantity_consistency(request, prodid, batchno):
    with connection.cursor() as cursor:
        sql = 'with sold_return_qty_sum as (select sum(return_sales_sale_quantity) as "sold_return"' \
        'from master_home_returnsalesmaster' \
        'where return_sales_productid_id=%s and return_sales_product_batch_no=%s'\
        '), sold_qty_sum as ( select sum(sale_quantity) as "sold"' \
        'from master_home_salesmaster where productid_id=%s and product_batch_no=%s '\
        ')select sold, sold_return, sold-sold_return as "check" from sold_return_qty_sum, sold_qty_sum;'
        params = [prodid, batchno, prodid, batchno]
        cursor.execute(sql, params)
        rows = cursor.fetchall()
        results=[]    
        for row in rows:
            results.append({"sold" :row[0], "sold_return" :row[1], "sold_check" :row[2] })
            print(f"Sold: {row[0]}, Sold_Return: {row[1]}, Check: {row[2]}")
    print(results)
    return JsonResponse(results, safe=False)


@csrf_exempt 
def get_sale_return_edit(request, salesid):
    call_command('clearsessions')
    sale_master_obj=ReturnSalesMaster.objects.filter(return_sales_invoiceid=salesid)
    
    results = [{'salesid' : item.return_sales_invoiceid, 'productid': item.return_sales_productid.productid, 'product_name': item.return_sales_productid.product_name,
                'product_company': item.return_sales_productid.product_company, 'product_packing': item.return_sales_productid.product_packing,
                'product_batch_no': item.return_sales_product_batch_no, 'product_expiry': item.return_sales_product_expiry,
                'product_MRP': item.return_sales_product_MRP,'product_hsn': item.return_sales_productid.product_hsn,
                'product_hsn_percent': item.return_sales_productid.product_hsn_percent,'sale_rate': item.return_sales_sale_rate,
                'sale_quantity': item.return_sales_sale_quantity,
                'customerid': item.return_sales_customerid.customerid, 'customer_name': item.return_sales_customerid.customer_name, 
                'customer_type': item.return_sales_customerid.customer_type,
                'customer_address': item.return_sales_customerid.customer_address, 'customer_gstno': item.return_sales_customerid.customer_gstno, 
                'customer_dlno': item.return_sales_customerid.customer_dlno, 'sales_invoice_no': item.sales_invoice_no.sales_invoice_no,
                'return_sales_invoice_no' : item.return_sales_invoice_no.return_sales_invoice_no,
                'sales_invoice_date': item.sales_invoice_no.sales_invoice_date,
                'sale_entry_date': item.return_sales_sale_entry_date, 'sale_scheme':item.return_sales_sale_scheme,  
                'sale_igst': item.return_sales_sale_igst, 'sale_total_amount': item.return_sales_total_amount, 
                } for item in sale_master_obj]    
    print(results)
    return JsonResponse(results, safe=False)

csrf_exempt   
def sale_return_update(request, saleid):
    call_command('clearsessions')
    obj = get_object_or_404(ReturnSalesMaster, return_sales_invoiceid=saleid)
    if request.method=='POST':
        form=frm_salereturnsmaster_edit(request.POST,instance=obj)
        print(form.data)
        if form.is_valid():
            form.save()
            print('Sale Return Information Updated!!!')
            return JsonResponse({'success': True, 'message': 'Data Updated successfully !!'})
        else:
            print(form.errors)
            return JsonResponse({'success': False, 'message': 'Form data is invalid !!'})

    else:
        return JsonResponse({'success': False, 'message': 'Form data is invalid !!'})



@csrf_exempt  
def inventory_home(request):
  call_command('clearsessions')
  if 'username' not in request.session:
     print('key expired!!!') 
     return redirect('logout/')
  else:
     with connection.cursor() as cursor:
         cursor.callproc('proc_productwise_stock_report')
         reportdata = cursor.fetchall()
     stock_data=[]
     for row in reportdata:
         stock_data.append({"productid_id" : row[0], "product_name" : str(row[1]), "pur_qty" : row[2], "pur_ret_qty" : row[3], "sale_qty" : row[4], "sale_ret_qty" : row[5], "In_Stock" : row[6]})
            
     print(stock_data)
     mypharmadata=Pharmacy_Details.objects.all().first()
  
     uname=request.session['username']
     imgpath=request.session['imgpath']
     fname=request.session['fname']
     lname=request.session['lname']
     utype=request.session['utype']
        
     context = {
        'mypharmadata' : mypharmadata,
        'imgpath' : imgpath,
        'fname' : fname,
        'lname' : lname,
        'utype' : utype,
        'stockdata' : stock_data,
     }
     template = loader.get_template('inventory_home.html')
     return HttpResponse(template.render(request=request,context=context))
  
@csrf_exempt 
def product_wise_stock(request):
    call_command('clearsessions')
    with connection.cursor() as cursor:
         cursor.callproc('proc_productwise_stock_report')
         reportdata = cursor.fetchall()
    results=[]
    for row in reportdata:
        results.append({"productid_id" : row[0], "product_name" : str(row[1]), "pur_qty" : row[2], "pur_ret_qty" : row[3], "sale_qty" : row[4], "sale_ret_qty" : row[5], "In_Stock" : row[6]})
    print(results)
    return JsonResponse(results, safe=False)




@csrf_exempt 
def batch_wise_stock(request):
    call_command('clearsessions')
    with connection.cursor() as cursor:
         cursor.callproc('proc_batchwise_stock_report')
         reportdata = cursor.fetchall()
    results=[]
    for row in reportdata:
        results.append({"productid_id" : row[0], "product_name" : str(row[1]), "product_batch_no" : str(row[2]), "pur_qty" : row[3], "pur_ret_qty" : row[4], "sale_qty" : row[5], "sale_ret_qty" : row[6], "In_Stock" : row[7]})
    print(results)
    return JsonResponse(results, safe=False)

  
@csrf_exempt  
def report_home(request):
  call_command('clearsessions')
  if 'username' not in request.session:
     print('key expired!!!') 
     return redirect('logout/')
  else:
     with connection.cursor() as cursor:
         cursor.callproc('proc_batchwise_stock_report')
         reportdata = cursor.fetchall()
     rep_data=[]
     for row in reportdata:
            rep_data.append({"productid_id" : row[0], "product_name" : str(row[1]), "product_batch_no" : str(row[2]), "pur_qty" : row[3], "pur_ret_qty" : row[4], "sale_qty" : row[5], "sale_ret_qty" : row[6], "In_Stock" : row[7]})
            # print( "{productid_id :" + str(row[0]) + " }")
     print(rep_data)
     mypharmadata=Pharmacy_Details.objects.all().first()
     uname=request.session['username']
     imgpath=request.session['imgpath']
     fname=request.session['fname']
     lname=request.session['lname']
     utype=request.session['utype']
  
     context = {
        'mypharmadata' : mypharmadata,
        'imgpath' : imgpath,
        'fname' : fname,
        'lname' : lname,
        'utype' : utype,
        'reportdata' : rep_data,
     }
     template = loader.get_template('report_home.html')
     return HttpResponse(template.render(request=request,context=context))
  


@csrf_exempt 
def product_wise_stock_report(request):
    call_command('clearsessions')
    with connection.cursor() as cursor:
         cursor.callproc('proc_productwise_stock_report')
         reportdata = cursor.fetchall()
    results=[]
    for row in reportdata:
        results.append({"productid_id" : row[0], "product_name" : str(row[1]), "pur_qty" : row[2], "pur_ret_qty" : row[3], "sale_qty" : row[4], "sale_ret_qty" : row[5], "In_Stock" : row[6]})
    print(results)
    return JsonResponse(results, safe=False)




@csrf_exempt 
def batch_wise_stock_report(request):
    call_command('clearsessions')
    with connection.cursor() as cursor:
         cursor.callproc('proc_batchwise_stock_report')
         reportdata = cursor.fetchall()
    results=[]
    for row in reportdata:
        results.append({"productid_id" : row[0], "product_name" : str(row[1]), "product_batch_no" : str(row[2]), "pur_qty" : row[2], "pur_ret_qty" : row[3], "sale_qty" : row[4], "sale_ret_qty" : row[5], "In_Stock" : row[6]})
    print(results)
    return JsonResponse(results, safe=False)


@csrf_exempt   
def get_invoice_entries_on_batchno_customerid(request, batchno, custid):
    call_command('clearsessions')
    sale_master_obj=SalesMaster.objects.filter(return_sales_product_batch_no=batchno, return_sales_customerid=custid)
    if sale_master_obj is None:
        print("Record does not exists!!")
        results=[]
    else:
         results=[]
         results =[{'sale_id' : item.id, 'productid' : item.productid.productid, 'product_name' : item.product_name, 
                'product_batch_no' : item.product_batch_no,
                'product_company' : item.product_company, 'product_packing' : item.product_packing, 
                'product_expiry': item.product_expiry, 'sale_igst' : item.sale_igst,
                'product_MRP': item.product_MRP,'sale_rate': item.sale_rate,
                'sale_quantity': item.sale_quantity,
                'sale_scheme':item.sale_scheme} for item in sale_master_obj ]

    print("Invoice Entries based on batchno and customerid!! ", results)
    return JsonResponse(results, safe=False)


@csrf_exempt   
def sales_return_invoicepaid_addition(request):
    call_command('clearsessions')
    try:
        if request.method=='POST':
            form=frm_salesreturninvoicepaid(request.POST)
          
            if form.is_valid():
                form.save()
                print('Payment against invoice added!!!')
                messages.add_message(request, messages.INFO, form.errors)
                return JsonResponse({'success': True, 'message': 'Record Saved successfully'})
            else:
                print(form.errors)
                return JsonResponse({'success': False, 'errors': form.errors})
        else:
            print("This is GET Way!!")
            form=frm_salesreturninvoicepaid()
    except Exception as e:
        print(e)  
    return JsonResponse({'success': False, 'message': 'Invalid request'})


def get_sales_return_payment_history(request, inv_no):
    print(inv_no)
    sales_invoicepaid_master_obj=ReturnSalesInvoicePaid.objects.filter(return_sales_ip_invoice_no__exact=inv_no)
    results = [{'sales_payment_id': item.return_sales_payment_id, 'sales_ip_invoice_no': item.return_sales_ip_invoice_no.return_sales_invoice_no, 'sales_payment_date': item.return_sales_payment_date, 
                'sales_payment_amount': item.return_sales_payment_amount, 'sales_payment_mode': item.return_sales_payment_mode,
                'sales_payment_ref_no': item.return_sales_payment_ref_no } for item in sales_invoicepaid_master_obj]    
    print(results)
    return JsonResponse(results, safe=False)


@csrf_exempt   
def sales_invoicepaid_deletion(request, payid):
    
    call_command('clearsessions')
   
    pay_obj=SalesInvoicePaid.objects.get(sales_payment_id=payid) 
    if pay_obj is not None:
        pay_obj.delete()
        print('Payment Entry Deleted Succesfully!!!')
        return JsonResponse({'success': True, 'message': 'Record deleted successfully'})
    else:
        print("Payment Entry with such details, does not exist !!!")
    return JsonResponse({'success': False, 'message': 'Invalid request'})




@csrf_exempt   
def sale_return_delete(request, retsalesid):
    call_command('clearsessions')
    ret_sales_obj=ReturnSalesMaster.objects.get(return_sales_invoiceid=retsalesid) 
      
    if ret_sales_obj is not None:
        ret_sales_obj.delete()
        print('Sales Entry Deleted Succesfully!!')
        return JsonResponse({'success': True, 'message': 'Sales Entry Deleted Succesfully!!'})      
    else:
        print("Sales Entry with such details, does not exist !!!")
        return JsonResponse({'success': False, 'message': 'Sales Entry with such details, does not exist !!'})
    


@csrf_exempt   
def sr_payment_history_delete(request, payid):
    call_command('clearsessions')
    print(payid)
    pay_obj=ReturnSalesInvoicePaid.objects.get(return_sales_payment_id=payid) 
    if pay_obj is not None:
        pay_obj.delete()
        print('Payment Entry Deleted Succesfully!!!')
        return JsonResponse({'success': True, 'message': 'Record deleted successfully'})
    else:
        print("Payment Entry with such details, does not exist !!")
        return JsonResponse({'success': False, 'message': 'Payment Entry with such details, does not exist !!'})
   

"""
URL configuration for MyPharmaERP project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.conf import settings
from django.conf.urls.static import static
from django.urls import path
from . import views

urlpatterns = [
    path('',views.master_login,name='login'),
    path('home',views.master_home,name='home'),
    path('loggedin_master_home',views.loggedin_master_home,name='loggedin_master_home'),
    path('login',views.master_login,name='login'),
    path('logout/',views.logoutPage,name='logout'),
    path('logout1',views.logoutPage,name='logout1'),
    path('signup',views.signup,name='signup'),
    path('master_login_check',views.master_login_check,name='master_login_check'),
    path('master_signup',views.master_signup,name='master_signup'),

    path('pharma_data_view',views.pharma_data_view,name='pharma_data_view'),
    
    # path('profile_upload',views.profile_upload,name='profile_upload'),
    # path('Image_Upload',views.Image_Upload,name='Image_Upload'),
    # path('student_master_view',views.student_master_view,name='student_master_view'),
    path('supplier_home',views.supplier_home,name='supplier_home'),
    path('search_supplier_home/<str:sup_search>',views.search_supplier_home,name='search_supplier_home'),
    path('supplier_add',views.supplier_add,name='supplier_add'),
    path('supplier_addition',views.supplier_addition,name='supplier_addition'),
    path('supplier_edit',views.supplier_edit,name='supplier_edit'),
    path('supplier_update',views.supplier_update,name='supplier_update'),
    path('supplier_delete/<int:suppl_id>', views.supplier_delete, name='supplier_delete'),

    path('customer_home',views.customer_home,name='customer_home'),
    path('search_customer_home/<str:cust_search>',views.search_customer_home,name='search_customer_home'),
    path('customer_add',views.customer_add,name='customer_add'),
    path('customer_addition',views.customer_addition,name='customer_addition'),
    path('customer_edit',views.customer_edit,name='customer_edit'),
    path('customer_update',views.customer_update,name='customer_update'),
    path('customer_delete/<int:cust_id>', views.customer_delete, name='customer_delete'),

    path('product_home',views.product_home,name='product_home'),
    path('search_product_home/<str:prod_search>',views.search_product_home,name='search_product_home'),
    path('product_page_load/<int:pgno>',views.product_page_load,name='product_page_load'),
    path('product_display',views.product_display,name='product_display'),
    path('product_add',views.product_add,name='product_add'),
    path('product_addition',views.product_addition,name='product_addition'),
    path('product_rate_addition',views.product_rate_addition,name='product_rate_addition'),
    path('get_product_rates',views.get_product_rates,name='get_product_rates'),
    path('product_rate_delete/<int:rate_id>',views.product_rate_delete,name='product_rate_delete'),
    path('get_product_batches/<int:prod_id>',views.get_product_batches,name='get_product_batches'),
    
    
    
    # path('product_edit',views.product_edit,name='product_edit'),
    path('product_edit/<int:pgno>/<int:prod_id>',views.product_edit,name='product_edit'),
    # path('product_update',views.product_update,name='product_update'),
    path('product_update/<int:pgno>/<int:prod_id>',views.product_update,name='product_update'),
    path('product_delete/<int:prod_id>', views.product_delete, name='product_delete'),

    path('purchase_home',views.purchase_home, name='purchase_home'),
    path('purchase_add_home/<int:supplid>/<str:invno>',views.purchase_add_home, name='purchase_add_home'),
    
    path('purchase_add',views.purchase_add, name='purchase_add'),
    path('purchase_addition',views.purchase_addition, name='purchase_addition'),
    path('purchase_edit/<int:purid>/<str:invno>/<int:supplid>/<int:prodid>',views.purchase_edit, name='purchase_edit'),
    path('purchase_update/<int:purid>',views.purchase_update, name='purchase_update'),
    path('purchase_delete/<int:purid>',views.purchase_delete, name='purchase_delete'),
    path('get_invoice_paid_info/<int:inv_id>',views.get_invoice_paid_info, name='get_invoice_paid_info'),

    
    
    path('get_purchase_edit/<int:purid>',views.get_purchase_edit, name='get_purchase_edit'),

    path('get_supplier_names/<str:str_to_match>',views.get_supplier_names, name='get_supplier_names'),
    path('get_invoice_numbers/<str:supplier>',views.get_invoice_numbers, name='get_invoice_numbers'),
    path('invoice_select_view/<str:invno>/<int:supplid>',views.invoice_select_view, name='invoice_select_view'),
    

    path('supplier_select_view/<str:supplier_to_match>',views.supplier_select_view, name='supplier_select_view'),
    path('search_invoice/<str:inv_no>/<int:suppl_id>',views.search_invoice, name='search_invoice'),
    path('search_invoice_home/<str:inv_no>',views.search_invoice_home, name='search_invoice_home'),

    
    path('get_invoice_date/<int:suppl_id>/<str:inv_no>',views.get_invoice_date, name='get_invoice_date'),

    # path('invoice_addition/<str:invno>/<int:supplno>',views.invoice_addition, name='invoice_addition'),
    path('invoice_addition',views.invoice_addition, name='invoice_addition'),
    path('invoicepaid_addition/<int:invid>',views.invoicepaid_addition, name='invoicepaid_addition'),
    path('invoice_delete/<int:invid>',views.invoice_delete, name='invoice_delete'),
    
    path('get_payment_history/<int:invoice_id>',views.get_payment_history, name='get_payment_history'),
    path('payment_history_delete/<int:payid>',views.payment_history_delete, name='payment_history_delete'),

   
     

    path('invoice_master_edit/<int:inv_id>',views.invoice_master_edit, name='invoice_master_edit'),
    path('invoice_master_update/<int:inv_id>',views.invoice_master_update, name='invoice_master_update'),
    path('search_invoice_master/<str:inv_no>/<int:suppl_id>',views.search_invoice_master, name='search_invoice_master'),
    
    
   
    path('get_product_names/<str:str_to_match>',views.get_product_names,name='get_product_names'),

    # path('customer_view',views.customer_view,name='customer_view'),
    path('customer_view', views.customer_view, name='customer_view'),
    path('product_view', views.product_view, name='product_view'),
    path('supplier_view', views.supplier_view, name='supplier_view'),
    path('purchase_view', views.purchase_view, name='purchase_view'),

    path('sales_home', views.sales_home, name='sales_home'),
    path('sales_delete/<int:salesid>',views.sales_delete, name='sales_delete'),
    path('sales_addition',views.sales_addition, name='sales_addition'),
    path('salesinvoice_addition',views.salesinvoice_addition, name='salesinvoice_addition'),
    path('sales_invoice_delete/<str:invid>',views.sales_invoice_delete, name='sales_invoice_delete'),
    path('sale_update/<int:saleid>',views.sale_update, name='sale_update'),
    path('create_new_sales_invoice_no',views.create_new_sales_invoice_no, name='create_new_sales_invoice_no'),
    path('get_customer_names/<str:str_to_match>',views.get_customer_names, name='get_customer_names'),
    path('customer_select_view/<str:customer_to_match>',views.customer_select_view, name='customer_select_view'),
    path('search_sales_invoice_master/<str:inv_no>/<int:cust_id>',views.search_sales_invoice_master, name='search_sales_invoice_master'),
    path('search_sales_invoice/<str:inv_no>/<int:cust_id>',views.search_sales_invoice, name='search_sales_invoice'),
    path('fetch_PurchaseMaster/<int:prodid>/<str:batchno>/<str:custtype>',views.fetch_PurchaseMaster, name='fetch_PurchaseMaster'),
    path('get_sale_rates/<int:prodid>',views.get_sale_rates,name='get_sale_rates'),
    path('sale_addition',views.sale_addition, name='sale_addition'),
    path('get_sale_edit/<int:salesid>',views.get_sale_edit, name='get_sale_edit'),
    path('get_sales_invoice_paid_info/<str:inv_no>',views.get_sales_invoice_paid_info, name='get_sales_invoice_paid_info'),
    path('get_sales_payment_history/<str:inv_no>',views.get_sales_payment_history, name='get_sales_payment_history'),
    path('sales_invoicepaid_addition',views.sales_invoicepaid_addition, name='sales_invoicepaid_addition'),
    path('sales_invoicepaid_deletion<int:payid>',views.sales_invoicepaid_deletion, name='sales_invoicepaid_deletion'),
    
    
    path('purchase_return_home',views.purchase_return_home, name='purchase_return_home'),
    path('create_new_purchasereturn_invoice_no',views.create_new_purchasereturn_invoice_no, name='create_new_purchasereturn_invoice_no'),
    path('returninvoice_addition',views.returninvoice_addition, name='returninvoice_addition'),
    path('return_search_invoice_master/<str:inv_id>/<int:suppl_id>',views.return_search_invoice_master, name='return_search_invoice_master'),
    path('return_search_invoice/<str:inv_id>/<int:suppl_id>',views.return_search_invoice, name='return_search_invoice'),
    path('fetch_PurchaseMaster_for_PurchaseReturn/<int:prodid>/<str:batchno>',views.fetch_PurchaseMaster_for_PurchaseReturn, name='fetch_PurchaseMaster_for_PurchaseReturn'),
    path('return_purchase_addition',views.return_purchase_addition, name='return_purchase_addition'),
    path('purchase_returns_invoice_master_edit/<str:inv_id>',views.purchase_returns_invoice_master_edit, name='purchase_returns_invoice_master_edit'),
    path('purchase_return_invoice_master_update/<str:inv_id>',views.purchase_return_invoice_master_update, name='purchase_return_invoice_master_update'),
    path('purchase_return_delete/<int:purid>',views.purchase_return_delete, name='purchase_return_delete'),
    # path('purchase_return_edit/<int:purid>',views.purchase_return_edit, name='purchase_return_edit'),
    path('get_purchase_edit/<int:purid>',views.get_purchase_edit, name='get_purchase_edit'),
    path('get_purchase_return_edit/<int:purid>',views.get_purchase_return_edit, name='get_purchase_return_edit'),
    path('purchase_return_update/<int:purid>',views.purchase_return_update, name='purchase_return_update'),
    path('purchase_return_invoice_delete/<str:invid>',views.purchase_return_invoice_delete, name='purchase_return_invoice_delete'),

    path('get_purchasereturninvoice_paid_info/<str:inv_id>',views.get_purchasereturninvoice_paid_info, name='get_purchasereturninvoice_paid_info'),
    path('purchase_return_invoicepaid_addition',views.purchase_return_invoicepaid_addition, name='purchase_return_invoicepaid_addition'),
    path('get_purchase_return_payment_history/<str:invoice_id>',views.get_purchase_return_payment_history, name='get_purchase_return_payment_history'),
    path('pr_payment_history_delete/<int:payid>',views.pr_payment_history_delete, name='pr_payment_history_delete'),
    path('get_sales_return_payment_history/<str:inv_no>',views.get_sales_return_payment_history, name='get_sales_return_payment_history'),

    path('get_AvailableQuantity/<int:prodid>/<str:batchno>/<int:saleid>',views.get_AvailableQuantity, name='get_AvailableQuantity'),

    path('sales_return_home', views.sales_return_home, name='sales_return_home'),
    path('create_new_sales_return_invoice_no',views.create_new_sales_return_invoice_no, name='create_new_sales_return_invoice_no'),
    path('salesreturninvoice_addition',views.salesreturninvoice_addition, name='salesreturninvoice_addition'),
    path('sales_return_invoice_master_edit/<str:inv_id>',views.sales_return_invoice_master_edit, name='sales_return_invoice_master_edit'),
    path('sales_return_invoice_master_update/<str:inv_id>',views.sales_return_invoice_master_update, name='sales_return_invoice_master_update'),
    path('sales_return_invoice_delete/<str:invid>',views.sales_return_invoice_delete, name='sales_return_invoice_delete'),
    path('search_sales_return_invoice_master/<str:inv_no>/<int:cust_id>',views.search_sales_return_invoice_master, name='search_sales_return_invoice_master'),
    path('sales_return_invoicepaid_addition',views.sales_return_invoicepaid_addition, name='sales_return_invoicepaid_addition'),
    path('search_sales_return_invoice/<str:inv_no>/<int:cust_id>',views.search_sales_return_invoice, name='search_sales_return_invoice'),
    path('sale_return_addition',views.sale_return_addition, name='sale_return_addition'),
    path('sale_return_update/<int:saleid>',views.sale_return_update, name='sale_return_update'),
    path('sale_return_delete/<int:retsalesid>',views.sale_return_delete, name='sale_return_delete'),
    path('sr_payment_history_delete/<int:payid>',views.sr_payment_history_delete, name='sr_payment_history_delete'),
    
    
    path('get_invoice_entries/<str:invno>',views.get_invoice_entries, name='get_invoice_entries'),
    path('get_invoice_entries_on_batchno_customerid/<str:batchno>/<int:custid>',views.get_invoice_entries_on_batchno_customerid, name='get_invoice_entries_on_batchno_customerid'),
    
    path('get_sale_quantity_consistency/<int:prodid><str:batchno>',views.get_sale_quantity_consistency, name='get_sale_quantity_consistency'),
    path('get_sale_return_edit/<int:salesid>',views.get_sale_return_edit, name='get_sale_return_edit'),

    path('inventory_home',views.inventory_home, name='inventory_home'),
    path('product_wise_stock',views.product_wise_stock, name='product_wise_stock'),
    path('batch_wise_stock',views.batch_wise_stock, name='batch_wise_stock'),



    path('report_home',views.report_home, name='report_home'),
    path('product_wise_stock_report',views.product_wise_stock_report, name='product_wise_stock_report'),
    path('batch_wise_stock_report',views.batch_wise_stock_report, name='batch_wise_stock_report'),
]
if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
    




